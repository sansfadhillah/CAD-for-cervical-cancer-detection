{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['/device:CPU:0', '/device:XLA_CPU:0', '/device:GPU:0', '/device:XLA_GPU:0']\n",
      "Num GPUs Available:  1\n",
      "Wall time: 4.42 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "import tensorflow as tf\n",
    "tf.config.list_physical_devices('GPU')\n",
    "\n",
    "from tensorflow.python.client import device_lib\n",
    "\n",
    "def get_available_devices():\n",
    "    local_device_protos = device_lib.list_local_devices()\n",
    "    return [x.name for x in local_device_protos]\n",
    "\n",
    "print(get_available_devices())\n",
    "\n",
    "import tensorflow as tf\n",
    "print(\"Num GPUs Available: \", len(tf.config.experimental.list_physical_devices('GPU')))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install -U keras-tuner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import os\n",
    "import keras\n",
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import itertools\n",
    "from sklearn.metrics import confusion_matrix,classification_report\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "from keras import optimizers\n",
    "from keras.models import Sequential, Model\n",
    "from keras.layers import Input, Dropout, Flatten, Dense, Activation, merge\n",
    "from keras.layers import MaxPooling2D,Dense,Conv2D,MaxPooling2D,Flatten,AveragePooling2D,Dropout,BatchNormalization,Activation\n",
    "from keras.regularizers import l2\n",
    "from keras.utils import multi_gpu_model\n",
    "from keras.layers.normalization import BatchNormalization\n",
    "from keras import callbacks\n",
    "from keras.callbacks import ModelCheckpoint\n",
    "import time\n",
    "import json\n",
    "start = time.time()\n",
    "from kerastuner import HyperModel, Objective\n",
    "from kerastuner.tuners import BayesianOptimization\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#akses data\n",
    "train_data_path = r'C:\\Users\\Julius Chris\\Desktop\\data_skripsi\\training'\n",
    "test_data_path = r'C:\\Users\\Julius Chris\\Desktop\\data_skripsi\\testing'\n",
    "valid_data_path = r'C:\\Users\\Julius Chris\\Desktop\\data_skripsi\\validation'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "Parameters\n",
    "\"\"\"\n",
    "img_width, img_height = 224,224\n",
    "batch_size = 32\n",
    "samples_per_epoch = 100\n",
    "validation_steps = 100\n",
    "pool_size = 3\n",
    "classes_num = 5\n",
    "lr = 0.0001"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 3238 images belonging to 5 classes.\n",
      "Found 606 images belonging to 5 classes.\n",
      "Found 205 images belonging to 5 classes.\n"
     ]
    }
   ],
   "source": [
    "augs_gen = ImageDataGenerator(\n",
    "                rescale=1. / 255,\n",
    "                #rescale=None,\n",
    "                #shear_range=0.2,\n",
    "                #zoom_range=0.2,\n",
    "                rotation_range=.3,\n",
    "                #width_shift_range=.15,\n",
    "                #height_shift_range=.15,\n",
    "                vertical_flip=True,\n",
    "                horizontal_flip=True,\n",
    ")  \n",
    "\n",
    "train_generator = augs_gen.flow_from_directory(\n",
    "        train_data_path,\n",
    "        target_size = (img_height, img_width),\n",
    "        batch_size = batch_size,\n",
    "        class_mode = 'categorical',\n",
    "        shuffle = True,\n",
    ")\n",
    "\n",
    "validation_generator = augs_gen.flow_from_directory(\n",
    "      valid_data_path,\n",
    "      target_size = (img_height, img_width),\n",
    "      batch_size = batch_size,\n",
    "      class_mode = 'categorical',\n",
    "      shuffle = False,\n",
    ")\n",
    "\n",
    "testing_generator = augs_gen.flow_from_directory(\n",
    "      test_data_path,\n",
    "      target_size = (img_height, img_width),\n",
    "      class_mode = 'categorical',\n",
    "      shuffle = False\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# BEFORE TUNING MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = keras.models.Sequential([\n",
    "    keras.layers.Conv2D(filters=96, kernel_size=(11,11), strides=(4,4), activation='relu', input_shape=(224,224,3)),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),\n",
    "    keras.layers.Conv2D(filters=256, kernel_size=(5,5), strides=(1,1), activation='relu', padding=\"same\"),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),\n",
    "    keras.layers.Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), activation='relu', padding=\"same\"),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.Conv2D(filters=384, kernel_size=(1,1), strides=(1,1), activation='relu', padding=\"same\"),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.Conv2D(filters=256, kernel_size=(1,1), strides=(1,1), activation='relu', padding=\"same\"),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),\n",
    "    keras.layers.Flatten(),\n",
    "    keras.layers.Dense(4096, activation='relu'),\n",
    "    keras.layers.Dropout(0.5),\n",
    "    keras.layers.Dense(4096, activation='relu'),\n",
    "    keras.layers.Dropout(0.5),\n",
    "    keras.layers.Dense(5, activation='softmax')\n",
    "])\n",
    "model.compile(loss='categorical_crossentropy', \n",
    "              optimizer=tf.optimizers.Adam(lr=0.001), \n",
    "              metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('Failed to import pydot. You must `pip install pydot` and install graphviz (https://graphviz.gitlab.io/download/), ', 'for `pydotprint` to work.')\n"
     ]
    }
   ],
   "source": [
    "from keras.utils.vis_utils import plot_model\n",
    "plot_model(model, to_file='lenet_pretuned.png', show_shapes=True, show_layer_names=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "root_logdir = os.path.join(os.curdir, \"logs\\\\fit\\\\\")\n",
    "def get_run_logdir():\n",
    "    run_id = time.strftime(\"run_%Y_%m_%d-%H_%M_%S\")\n",
    "    return os.path.join(root_logdir, run_id)\n",
    "run_logdir = get_run_logdir()\n",
    "tensorboard_cb = keras.callbacks.TensorBoard(run_logdir)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "filepath = \"alexnet_pretuned.h5\"\n",
    "checkpoint = ModelCheckpoint(filepath,monitor='val_accuracy',verbose=1,save_best_only=True,mode='max')\n",
    "callbacks_list = [checkpoint,tensorboard_cb]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      " 1/50 [..............................] - ETA: 0s - loss: 3.3452 - accuracy: 0.1875WARNING:tensorflow:From C:\\Users\\Julius Chris\\AppData\\Roaming\\Python\\Python38\\site-packages\\tensorflow\\python\\ops\\summary_ops_v2.py:1277: stop (from tensorflow.python.eager.profiler) is deprecated and will be removed after 2020-07-01.\n",
      "Instructions for updating:\n",
      "use `tf.profiler.experimental.stop` instead.\n",
      " 2/50 [>.............................] - ETA: 4s - loss: 23.3007 - accuracy: 0.2188WARNING:tensorflow:Callbacks method `on_train_batch_end` is slow compared to the batch time (batch time: 0.0339s vs `on_train_batch_end` time: 0.1496s). Check your callbacks.\n",
      "50/50 [==============================] - ETA: 0s - loss: 6.6108 - accuracy: 0.5375\n",
      "Epoch 00001: val_accuracy improved from -inf to 0.24062, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 19s 388ms/step - loss: 6.6108 - accuracy: 0.5375 - val_loss: 10.3902 - val_accuracy: 0.2406\n",
      "Epoch 2/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 1.5109 - accuracy: 0.6669\n",
      "Epoch 00002: val_accuracy did not improve from 0.24062\n",
      "50/50 [==============================] - 18s 368ms/step - loss: 1.5109 - accuracy: 0.6669 - val_loss: 3.3507 - val_accuracy: 0.1031\n",
      "Epoch 3/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 1.0558 - accuracy: 0.6931\n",
      "Epoch 00003: val_accuracy did not improve from 0.24062\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 1.0558 - accuracy: 0.6931 - val_loss: 2.7719 - val_accuracy: 0.1719\n",
      "Epoch 4/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.9370 - accuracy: 0.7325\n",
      "Epoch 00004: val_accuracy improved from 0.24062 to 0.28438, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 17s 341ms/step - loss: 0.9370 - accuracy: 0.7325 - val_loss: 3.1185 - val_accuracy: 0.2844\n",
      "Epoch 5/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 1.0080 - accuracy: 0.7063\n",
      "Epoch 00005: val_accuracy improved from 0.28438 to 0.47188, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 17s 342ms/step - loss: 1.0080 - accuracy: 0.7063 - val_loss: 1.9429 - val_accuracy: 0.4719\n",
      "Epoch 6/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.7847 - accuracy: 0.7456\n",
      "Epoch 00006: val_accuracy improved from 0.47188 to 0.55313, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 0.7847 - accuracy: 0.7456 - val_loss: 1.4757 - val_accuracy: 0.5531\n",
      "Epoch 7/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.7187 - accuracy: 0.7756\n",
      "Epoch 00007: val_accuracy improved from 0.55313 to 0.78750, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 17s 341ms/step - loss: 0.7187 - accuracy: 0.7756 - val_loss: 0.6492 - val_accuracy: 0.7875\n",
      "Epoch 8/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.7339 - accuracy: 0.7744\n",
      "Epoch 00008: val_accuracy did not improve from 0.78750\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.7339 - accuracy: 0.7744 - val_loss: 1.4182 - val_accuracy: 0.5562\n",
      "Epoch 9/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.7761 - accuracy: 0.7700\n",
      "Epoch 00009: val_accuracy did not improve from 0.78750\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.7761 - accuracy: 0.7700 - val_loss: 1.3935 - val_accuracy: 0.6250\n",
      "Epoch 10/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.6810 - accuracy: 0.7980\n",
      "Epoch 00010: val_accuracy did not improve from 0.78750\n",
      "50/50 [==============================] - 16s 317ms/step - loss: 0.6810 - accuracy: 0.7980 - val_loss: 0.9050 - val_accuracy: 0.6875\n",
      "Epoch 11/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.7243 - accuracy: 0.7644\n",
      "Epoch 00011: val_accuracy did not improve from 0.78750\n",
      "50/50 [==============================] - 16s 317ms/step - loss: 0.7243 - accuracy: 0.7644 - val_loss: 1.2941 - val_accuracy: 0.5750\n",
      "Epoch 12/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.6128 - accuracy: 0.8062\n",
      "Epoch 00012: val_accuracy improved from 0.78750 to 0.82500, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 17s 336ms/step - loss: 0.6128 - accuracy: 0.8062 - val_loss: 0.4774 - val_accuracy: 0.8250\n",
      "Epoch 13/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.6488 - accuracy: 0.7937\n",
      "Epoch 00013: val_accuracy did not improve from 0.82500\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.6488 - accuracy: 0.7937 - val_loss: 0.6264 - val_accuracy: 0.7531\n",
      "Epoch 14/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5757 - accuracy: 0.8081\n",
      "Epoch 00014: val_accuracy did not improve from 0.82500\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.5757 - accuracy: 0.8081 - val_loss: 0.7577 - val_accuracy: 0.7281\n",
      "Epoch 15/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.6218 - accuracy: 0.8056\n",
      "Epoch 00015: val_accuracy improved from 0.82500 to 0.83438, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 17s 339ms/step - loss: 0.6218 - accuracy: 0.8056 - val_loss: 0.4724 - val_accuracy: 0.8344\n",
      "Epoch 16/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.6949 - accuracy: 0.8031\n",
      "Epoch 00016: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.6949 - accuracy: 0.8031 - val_loss: 0.6208 - val_accuracy: 0.7563\n",
      "Epoch 17/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.6252 - accuracy: 0.8069\n",
      "Epoch 00017: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 320ms/step - loss: 0.6252 - accuracy: 0.8069 - val_loss: 1.1456 - val_accuracy: 0.6438\n",
      "Epoch 18/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.6018 - accuracy: 0.8156\n",
      "Epoch 00018: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.6018 - accuracy: 0.8156 - val_loss: 0.4946 - val_accuracy: 0.8000\n",
      "Epoch 19/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.6879 - accuracy: 0.7961\n",
      "Epoch 00019: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 317ms/step - loss: 0.6879 - accuracy: 0.7961 - val_loss: 0.7985 - val_accuracy: 0.7563\n",
      "Epoch 20/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.6073 - accuracy: 0.8256\n",
      "Epoch 00020: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 319ms/step - loss: 0.6073 - accuracy: 0.8256 - val_loss: 0.6536 - val_accuracy: 0.8031\n",
      "Epoch 21/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.6352 - accuracy: 0.8081\n",
      "Epoch 00021: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.6352 - accuracy: 0.8081 - val_loss: 0.6402 - val_accuracy: 0.8188\n",
      "Epoch 22/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5209 - accuracy: 0.8380\n",
      "Epoch 00022: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 320ms/step - loss: 0.5209 - accuracy: 0.8380 - val_loss: 0.4102 - val_accuracy: 0.8313\n",
      "Epoch 23/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5565 - accuracy: 0.8206\n",
      "Epoch 00023: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.5565 - accuracy: 0.8206 - val_loss: 0.7755 - val_accuracy: 0.7031\n",
      "Epoch 24/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.6311 - accuracy: 0.8100\n",
      "Epoch 00024: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 322ms/step - loss: 0.6311 - accuracy: 0.8100 - val_loss: 0.9568 - val_accuracy: 0.6281\n",
      "Epoch 25/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5016 - accuracy: 0.8481\n",
      "Epoch 00025: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.5016 - accuracy: 0.8481 - val_loss: 0.5441 - val_accuracy: 0.8281\n",
      "Epoch 26/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5708 - accuracy: 0.8319\n",
      "Epoch 00026: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.5708 - accuracy: 0.8319 - val_loss: 0.5962 - val_accuracy: 0.8188\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 27/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5277 - accuracy: 0.8386\n",
      "Epoch 00027: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 321ms/step - loss: 0.5277 - accuracy: 0.8386 - val_loss: 0.7142 - val_accuracy: 0.7750\n",
      "Epoch 28/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5828 - accuracy: 0.8338\n",
      "Epoch 00028: val_accuracy did not improve from 0.83438\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.5828 - accuracy: 0.8338 - val_loss: 0.7474 - val_accuracy: 0.7281\n",
      "Epoch 29/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5647 - accuracy: 0.8256\n",
      "Epoch 00029: val_accuracy improved from 0.83438 to 0.85312, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.5647 - accuracy: 0.8256 - val_loss: 0.3332 - val_accuracy: 0.8531\n",
      "Epoch 30/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4467 - accuracy: 0.8537\n",
      "Epoch 00030: val_accuracy did not improve from 0.85312\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.4467 - accuracy: 0.8537 - val_loss: 0.4643 - val_accuracy: 0.8375\n",
      "Epoch 31/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4527 - accuracy: 0.8672\n",
      "Epoch 00031: val_accuracy did not improve from 0.85312\n",
      "50/50 [==============================] - 16s 322ms/step - loss: 0.4527 - accuracy: 0.8672 - val_loss: 0.6326 - val_accuracy: 0.8000\n",
      "Epoch 32/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5234 - accuracy: 0.8431\n",
      "Epoch 00032: val_accuracy did not improve from 0.85312\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.5234 - accuracy: 0.8431 - val_loss: 0.4062 - val_accuracy: 0.8438\n",
      "Epoch 33/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5143 - accuracy: 0.8380\n",
      "Epoch 00033: val_accuracy did not improve from 0.85312\n",
      "50/50 [==============================] - 16s 320ms/step - loss: 0.5143 - accuracy: 0.8380 - val_loss: 0.4843 - val_accuracy: 0.8125\n",
      "Epoch 34/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4992 - accuracy: 0.8506\n",
      "Epoch 00034: val_accuracy did not improve from 0.85312\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.4992 - accuracy: 0.8506 - val_loss: 0.5749 - val_accuracy: 0.8281\n",
      "Epoch 35/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4959 - accuracy: 0.8482\n",
      "Epoch 00035: val_accuracy did not improve from 0.85312\n",
      "50/50 [==============================] - 16s 321ms/step - loss: 0.4959 - accuracy: 0.8482 - val_loss: 0.8303 - val_accuracy: 0.7281\n",
      "Epoch 36/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5762 - accuracy: 0.8208\n",
      "Epoch 00036: val_accuracy did not improve from 0.85312\n",
      "50/50 [==============================] - 16s 322ms/step - loss: 0.5762 - accuracy: 0.8208 - val_loss: 0.7611 - val_accuracy: 0.7156\n",
      "Epoch 37/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5313 - accuracy: 0.8450\n",
      "Epoch 00037: val_accuracy did not improve from 0.85312\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.5313 - accuracy: 0.8450 - val_loss: 0.6954 - val_accuracy: 0.7781\n",
      "Epoch 38/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5099 - accuracy: 0.8456\n",
      "Epoch 00038: val_accuracy did not improve from 0.85312\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.5099 - accuracy: 0.8456 - val_loss: 0.5169 - val_accuracy: 0.8000\n",
      "Epoch 39/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4198 - accuracy: 0.8594\n",
      "Epoch 00039: val_accuracy did not improve from 0.85312\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.4198 - accuracy: 0.8594 - val_loss: 0.5326 - val_accuracy: 0.8125\n",
      "Epoch 40/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4774 - accuracy: 0.8564\n",
      "Epoch 00040: val_accuracy did not improve from 0.85312\n",
      "50/50 [==============================] - 16s 322ms/step - loss: 0.4774 - accuracy: 0.8564 - val_loss: 0.3905 - val_accuracy: 0.8531\n",
      "Epoch 41/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.5240 - accuracy: 0.8438\n",
      "Epoch 00041: val_accuracy did not improve from 0.85312\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.5240 - accuracy: 0.8438 - val_loss: 0.4531 - val_accuracy: 0.8219\n",
      "Epoch 42/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3713 - accuracy: 0.8850\n",
      "Epoch 00042: val_accuracy improved from 0.85312 to 0.86875, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 17s 348ms/step - loss: 0.3713 - accuracy: 0.8850 - val_loss: 0.3918 - val_accuracy: 0.8687\n",
      "Epoch 43/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4069 - accuracy: 0.8769\n",
      "Epoch 00043: val_accuracy improved from 0.86875 to 0.87813, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.4069 - accuracy: 0.8769 - val_loss: 0.3540 - val_accuracy: 0.8781\n",
      "Epoch 44/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3837 - accuracy: 0.8725\n",
      "Epoch 00044: val_accuracy improved from 0.87813 to 0.88750, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 18s 355ms/step - loss: 0.3837 - accuracy: 0.8725 - val_loss: 0.2704 - val_accuracy: 0.8875\n",
      "Epoch 45/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3774 - accuracy: 0.8781\n",
      "Epoch 00045: val_accuracy did not improve from 0.88750\n",
      "50/50 [==============================] - 17s 336ms/step - loss: 0.3774 - accuracy: 0.8781 - val_loss: 0.4403 - val_accuracy: 0.8250\n",
      "Epoch 46/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4006 - accuracy: 0.8719\n",
      "Epoch 00046: val_accuracy did not improve from 0.88750\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.4006 - accuracy: 0.8719 - val_loss: 1.2681 - val_accuracy: 0.6469\n",
      "Epoch 47/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3947 - accuracy: 0.8882\n",
      "Epoch 00047: val_accuracy did not improve from 0.88750\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.3947 - accuracy: 0.8882 - val_loss: 0.6851 - val_accuracy: 0.8094\n",
      "Epoch 48/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4560 - accuracy: 0.8609\n",
      "Epoch 00048: val_accuracy did not improve from 0.88750\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.4560 - accuracy: 0.8609 - val_loss: 1.2918 - val_accuracy: 0.6406\n",
      "Epoch 49/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3823 - accuracy: 0.8895\n",
      "Epoch 00049: val_accuracy did not improve from 0.88750\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.3823 - accuracy: 0.8895 - val_loss: 0.3130 - val_accuracy: 0.8844\n",
      "Epoch 50/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4626 - accuracy: 0.8590\n",
      "Epoch 00050: val_accuracy did not improve from 0.88750\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.4626 - accuracy: 0.8590 - val_loss: 0.4547 - val_accuracy: 0.8156\n",
      "Epoch 51/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4536 - accuracy: 0.8736\n",
      "Epoch 00051: val_accuracy did not improve from 0.88750\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.4536 - accuracy: 0.8736 - val_loss: 0.4501 - val_accuracy: 0.8500\n",
      "Epoch 52/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3479 - accuracy: 0.8881\n",
      "Epoch 00052: val_accuracy did not improve from 0.88750\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.3479 - accuracy: 0.8881 - val_loss: 0.3871 - val_accuracy: 0.8750\n",
      "Epoch 53/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4083 - accuracy: 0.8650\n",
      "Epoch 00053: val_accuracy did not improve from 0.88750\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.4083 - accuracy: 0.8650 - val_loss: 0.3937 - val_accuracy: 0.8687\n",
      "Epoch 54/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3660 - accuracy: 0.8907\n",
      "Epoch 00054: val_accuracy improved from 0.88750 to 0.92188, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 20s 392ms/step - loss: 0.3660 - accuracy: 0.8907 - val_loss: 0.2481 - val_accuracy: 0.9219\n",
      "Epoch 55/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4135 - accuracy: 0.8647\n",
      "Epoch 00055: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 321ms/step - loss: 0.4135 - accuracy: 0.8647 - val_loss: 0.6508 - val_accuracy: 0.7937\n",
      "Epoch 56/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4268 - accuracy: 0.8761\n",
      "Epoch 00056: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 321ms/step - loss: 0.4268 - accuracy: 0.8761 - val_loss: 0.3521 - val_accuracy: 0.8750\n",
      "Epoch 57/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3349 - accuracy: 0.9069\n",
      "Epoch 00057: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.3349 - accuracy: 0.9069 - val_loss: 0.2701 - val_accuracy: 0.9094\n",
      "Epoch 58/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3910 - accuracy: 0.8863\n",
      "Epoch 00058: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 320ms/step - loss: 0.3910 - accuracy: 0.8863 - val_loss: 0.5913 - val_accuracy: 0.7875\n",
      "Epoch 59/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4079 - accuracy: 0.8775\n",
      "Epoch 00059: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.4079 - accuracy: 0.8775 - val_loss: 0.5493 - val_accuracy: 0.8219\n",
      "Epoch 60/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3803 - accuracy: 0.8838\n",
      "Epoch 00060: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.3803 - accuracy: 0.8838 - val_loss: 0.5306 - val_accuracy: 0.8250\n",
      "Epoch 61/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3357 - accuracy: 0.8938\n",
      "Epoch 00061: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.3357 - accuracy: 0.8938 - val_loss: 0.4707 - val_accuracy: 0.8281\n",
      "Epoch 62/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3152 - accuracy: 0.9006\n",
      "Epoch 00062: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.3152 - accuracy: 0.9006 - val_loss: 1.1668 - val_accuracy: 0.6969\n",
      "Epoch 63/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3009 - accuracy: 0.9100\n",
      "Epoch 00063: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.3009 - accuracy: 0.9100 - val_loss: 0.5211 - val_accuracy: 0.8344\n",
      "Epoch 64/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3027 - accuracy: 0.8994\n",
      "Epoch 00064: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.3027 - accuracy: 0.8994 - val_loss: 0.3130 - val_accuracy: 0.8781\n",
      "Epoch 65/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2895 - accuracy: 0.9131\n",
      "Epoch 00065: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.2895 - accuracy: 0.9131 - val_loss: 0.2437 - val_accuracy: 0.9125\n",
      "Epoch 66/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3193 - accuracy: 0.9009\n",
      "Epoch 00066: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.3193 - accuracy: 0.9009 - val_loss: 0.8804 - val_accuracy: 0.7406\n",
      "Epoch 67/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3071 - accuracy: 0.9047\n",
      "Epoch 00067: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.3071 - accuracy: 0.9047 - val_loss: 0.9180 - val_accuracy: 0.7625\n",
      "Epoch 68/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3559 - accuracy: 0.8971\n",
      "Epoch 00068: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 322ms/step - loss: 0.3559 - accuracy: 0.8971 - val_loss: 0.7208 - val_accuracy: 0.8062\n",
      "Epoch 69/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3573 - accuracy: 0.8895\n",
      "Epoch 00069: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.3573 - accuracy: 0.8895 - val_loss: 0.2967 - val_accuracy: 0.8719\n",
      "Epoch 70/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3130 - accuracy: 0.9131\n",
      "Epoch 00070: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.3130 - accuracy: 0.9131 - val_loss: 1.0065 - val_accuracy: 0.6750\n",
      "Epoch 71/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3738 - accuracy: 0.8837\n",
      "Epoch 00071: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.3738 - accuracy: 0.8837 - val_loss: 0.8037 - val_accuracy: 0.7344\n",
      "Epoch 72/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3449 - accuracy: 0.8926\n",
      "Epoch 00072: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.3449 - accuracy: 0.8926 - val_loss: 0.5734 - val_accuracy: 0.7906\n",
      "Epoch 73/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2789 - accuracy: 0.9056\n",
      "Epoch 00073: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.2789 - accuracy: 0.9056 - val_loss: 0.3242 - val_accuracy: 0.8781\n",
      "Epoch 74/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2598 - accuracy: 0.9041\n",
      "Epoch 00074: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.2598 - accuracy: 0.9041 - val_loss: 0.3484 - val_accuracy: 0.8625\n",
      "Epoch 75/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2731 - accuracy: 0.9169\n",
      "Epoch 00075: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.2731 - accuracy: 0.9169 - val_loss: 0.3631 - val_accuracy: 0.8906\n",
      "Epoch 76/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2739 - accuracy: 0.9075\n",
      "Epoch 00076: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.2739 - accuracy: 0.9075 - val_loss: 0.3446 - val_accuracy: 0.8500\n",
      "Epoch 77/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2315 - accuracy: 0.9137\n",
      "Epoch 00077: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.2315 - accuracy: 0.9137 - val_loss: 0.4299 - val_accuracy: 0.8531\n",
      "Epoch 78/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2563 - accuracy: 0.9180\n",
      "Epoch 00078: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.2563 - accuracy: 0.9180 - val_loss: 0.5957 - val_accuracy: 0.8562\n",
      "Epoch 79/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2852 - accuracy: 0.9125\n",
      "Epoch 00079: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.2852 - accuracy: 0.9125 - val_loss: 0.3124 - val_accuracy: 0.8938\n",
      "Epoch 80/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3068 - accuracy: 0.9081\n",
      "Epoch 00080: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.3068 - accuracy: 0.9081 - val_loss: 0.2982 - val_accuracy: 0.8969\n",
      "Epoch 81/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2710 - accuracy: 0.9111\n",
      "Epoch 00081: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.2710 - accuracy: 0.9111 - val_loss: 0.3342 - val_accuracy: 0.8781\n",
      "Epoch 82/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2349 - accuracy: 0.9275\n",
      "Epoch 00082: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.2349 - accuracy: 0.9275 - val_loss: 0.2839 - val_accuracy: 0.8938\n",
      "Epoch 83/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3443 - accuracy: 0.8907\n",
      "Epoch 00083: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.3443 - accuracy: 0.8907 - val_loss: 0.4301 - val_accuracy: 0.8313\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 84/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3674 - accuracy: 0.8901\n",
      "Epoch 00084: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.3674 - accuracy: 0.8901 - val_loss: 0.4346 - val_accuracy: 0.8656\n",
      "Epoch 85/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2941 - accuracy: 0.9075\n",
      "Epoch 00085: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.2941 - accuracy: 0.9075 - val_loss: 0.4523 - val_accuracy: 0.8656\n",
      "Epoch 86/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3848 - accuracy: 0.8856\n",
      "Epoch 00086: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 336ms/step - loss: 0.3848 - accuracy: 0.8856 - val_loss: 0.4328 - val_accuracy: 0.8344\n",
      "Epoch 87/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2640 - accuracy: 0.9231\n",
      "Epoch 00087: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.2640 - accuracy: 0.9231 - val_loss: 0.2837 - val_accuracy: 0.9062\n",
      "Epoch 88/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2706 - accuracy: 0.9125\n",
      "Epoch 00088: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.2706 - accuracy: 0.9125 - val_loss: 1.2898 - val_accuracy: 0.6969\n",
      "Epoch 89/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2636 - accuracy: 0.9106\n",
      "Epoch 00089: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.2636 - accuracy: 0.9106 - val_loss: 0.3078 - val_accuracy: 0.9062\n",
      "Epoch 90/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2987 - accuracy: 0.9094\n",
      "Epoch 00090: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.2987 - accuracy: 0.9094 - val_loss: 0.6133 - val_accuracy: 0.8219\n",
      "Epoch 91/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2539 - accuracy: 0.9250\n",
      "Epoch 00091: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.2539 - accuracy: 0.9250 - val_loss: 1.4396 - val_accuracy: 0.6562\n",
      "Epoch 92/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2857 - accuracy: 0.9199\n",
      "Epoch 00092: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.2857 - accuracy: 0.9199 - val_loss: 0.4048 - val_accuracy: 0.8719\n",
      "Epoch 93/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1821 - accuracy: 0.9356\n",
      "Epoch 00093: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.1821 - accuracy: 0.9356 - val_loss: 0.2257 - val_accuracy: 0.9062\n",
      "Epoch 94/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2933 - accuracy: 0.9174\n",
      "Epoch 00094: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.2933 - accuracy: 0.9174 - val_loss: 0.3438 - val_accuracy: 0.8656\n",
      "Epoch 95/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2218 - accuracy: 0.9231\n",
      "Epoch 00095: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.2218 - accuracy: 0.9231 - val_loss: 0.3162 - val_accuracy: 0.8813\n",
      "Epoch 96/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2543 - accuracy: 0.9319\n",
      "Epoch 00096: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.2543 - accuracy: 0.9319 - val_loss: 0.3698 - val_accuracy: 0.8781\n",
      "Epoch 97/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2728 - accuracy: 0.9206\n",
      "Epoch 00097: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.2728 - accuracy: 0.9206 - val_loss: 0.3963 - val_accuracy: 0.8625\n",
      "Epoch 98/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2957 - accuracy: 0.9072\n",
      "Epoch 00098: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.2957 - accuracy: 0.9072 - val_loss: 0.4095 - val_accuracy: 0.8656\n",
      "Epoch 99/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3080 - accuracy: 0.9022\n",
      "Epoch 00099: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 322ms/step - loss: 0.3080 - accuracy: 0.9022 - val_loss: 0.7286 - val_accuracy: 0.8125\n",
      "Epoch 100/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2311 - accuracy: 0.9287\n",
      "Epoch 00100: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.2311 - accuracy: 0.9287 - val_loss: 0.6115 - val_accuracy: 0.7594\n",
      "Epoch 101/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2016 - accuracy: 0.9356\n",
      "Epoch 00101: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.2016 - accuracy: 0.9356 - val_loss: 0.4080 - val_accuracy: 0.8813\n",
      "Epoch 102/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2246 - accuracy: 0.9312\n",
      "Epoch 00102: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.2246 - accuracy: 0.9312 - val_loss: 0.3960 - val_accuracy: 0.8562\n",
      "Epoch 103/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2023 - accuracy: 0.9337\n",
      "Epoch 00103: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.2023 - accuracy: 0.9337 - val_loss: 0.2421 - val_accuracy: 0.9094\n",
      "Epoch 104/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1971 - accuracy: 0.9325\n",
      "Epoch 00104: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.1971 - accuracy: 0.9325 - val_loss: 0.2979 - val_accuracy: 0.9187\n",
      "Epoch 105/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1804 - accuracy: 0.9371\n",
      "Epoch 00105: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.1804 - accuracy: 0.9371 - val_loss: 0.2502 - val_accuracy: 0.9094\n",
      "Epoch 106/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2040 - accuracy: 0.9344\n",
      "Epoch 00106: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.2040 - accuracy: 0.9344 - val_loss: 0.2250 - val_accuracy: 0.9187\n",
      "Epoch 107/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2266 - accuracy: 0.9320\n",
      "Epoch 00107: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.2266 - accuracy: 0.9320 - val_loss: 0.4760 - val_accuracy: 0.8750\n",
      "Epoch 108/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2323 - accuracy: 0.9250\n",
      "Epoch 00108: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.2323 - accuracy: 0.9250 - val_loss: 0.5781 - val_accuracy: 0.8219\n",
      "Epoch 109/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2328 - accuracy: 0.9320\n",
      "Epoch 00109: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.2328 - accuracy: 0.9320 - val_loss: 0.3338 - val_accuracy: 0.8750\n",
      "Epoch 110/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2758 - accuracy: 0.9130\n",
      "Epoch 00110: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.2758 - accuracy: 0.9130 - val_loss: 0.3134 - val_accuracy: 0.8906\n",
      "Epoch 111/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2813 - accuracy: 0.9269\n",
      "Epoch 00111: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.2813 - accuracy: 0.9269 - val_loss: 0.4118 - val_accuracy: 0.8594\n",
      "Epoch 112/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3098 - accuracy: 0.9123\n",
      "Epoch 00112: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.3098 - accuracy: 0.9123 - val_loss: 0.3256 - val_accuracy: 0.8781\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 113/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2380 - accuracy: 0.9319\n",
      "Epoch 00113: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.2380 - accuracy: 0.9319 - val_loss: 0.6107 - val_accuracy: 0.7875\n",
      "Epoch 114/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2892 - accuracy: 0.9104\n",
      "Epoch 00114: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.2892 - accuracy: 0.9104 - val_loss: 1.5925 - val_accuracy: 0.5250\n",
      "Epoch 115/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2195 - accuracy: 0.9312\n",
      "Epoch 00115: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.2195 - accuracy: 0.9312 - val_loss: 0.2935 - val_accuracy: 0.9031\n",
      "Epoch 116/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2246 - accuracy: 0.9276\n",
      "Epoch 00116: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 18s 363ms/step - loss: 0.2246 - accuracy: 0.9276 - val_loss: 0.1733 - val_accuracy: 0.9219\n",
      "Epoch 117/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2080 - accuracy: 0.9365\n",
      "Epoch 00117: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.2080 - accuracy: 0.9365 - val_loss: 0.2320 - val_accuracy: 0.9062\n",
      "Epoch 118/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1942 - accuracy: 0.9413\n",
      "Epoch 00118: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.1942 - accuracy: 0.9413 - val_loss: 0.2250 - val_accuracy: 0.9062\n",
      "Epoch 119/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1749 - accuracy: 0.9425\n",
      "Epoch 00119: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.1749 - accuracy: 0.9425 - val_loss: 0.2764 - val_accuracy: 0.8875\n",
      "Epoch 120/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1843 - accuracy: 0.9413\n",
      "Epoch 00120: val_accuracy did not improve from 0.92188\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.1843 - accuracy: 0.9413 - val_loss: 0.3583 - val_accuracy: 0.9062\n",
      "Epoch 121/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1996 - accuracy: 0.9377\n",
      "Epoch 00121: val_accuracy improved from 0.92188 to 0.92813, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 17s 350ms/step - loss: 0.1996 - accuracy: 0.9377 - val_loss: 0.2323 - val_accuracy: 0.9281\n",
      "Epoch 122/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1572 - accuracy: 0.9525\n",
      "Epoch 00122: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.1572 - accuracy: 0.9525 - val_loss: 0.4559 - val_accuracy: 0.8594\n",
      "Epoch 123/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1641 - accuracy: 0.9531\n",
      "Epoch 00123: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1641 - accuracy: 0.9531 - val_loss: 2.4627 - val_accuracy: 0.6906\n",
      "Epoch 124/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2101 - accuracy: 0.9269\n",
      "Epoch 00124: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.2101 - accuracy: 0.9269 - val_loss: 0.3121 - val_accuracy: 0.8875\n",
      "Epoch 125/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2203 - accuracy: 0.9333\n",
      "Epoch 00125: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.2203 - accuracy: 0.9333 - val_loss: 0.2167 - val_accuracy: 0.9156\n",
      "Epoch 126/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2153 - accuracy: 0.9409\n",
      "Epoch 00126: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.2153 - accuracy: 0.9409 - val_loss: 0.2419 - val_accuracy: 0.9156\n",
      "Epoch 127/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1870 - accuracy: 0.9431\n",
      "Epoch 00127: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.1870 - accuracy: 0.9431 - val_loss: 0.3193 - val_accuracy: 0.8938\n",
      "Epoch 128/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1883 - accuracy: 0.9394\n",
      "Epoch 00128: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.1883 - accuracy: 0.9394 - val_loss: 0.3358 - val_accuracy: 0.9156\n",
      "Epoch 129/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1602 - accuracy: 0.9513\n",
      "Epoch 00129: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1602 - accuracy: 0.9513 - val_loss: 0.2510 - val_accuracy: 0.9125\n",
      "Epoch 130/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2322 - accuracy: 0.9238\n",
      "Epoch 00130: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.2322 - accuracy: 0.9238 - val_loss: 0.2192 - val_accuracy: 0.9250\n",
      "Epoch 131/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1888 - accuracy: 0.9356\n",
      "Epoch 00131: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1888 - accuracy: 0.9356 - val_loss: 0.8127 - val_accuracy: 0.7719\n",
      "Epoch 132/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1924 - accuracy: 0.9362\n",
      "Epoch 00132: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.1924 - accuracy: 0.9362 - val_loss: 0.3350 - val_accuracy: 0.9031\n",
      "Epoch 133/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1902 - accuracy: 0.9409\n",
      "Epoch 00133: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 322ms/step - loss: 0.1902 - accuracy: 0.9409 - val_loss: 0.4834 - val_accuracy: 0.8750\n",
      "Epoch 134/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2131 - accuracy: 0.9390\n",
      "Epoch 00134: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.2131 - accuracy: 0.9390 - val_loss: 0.2013 - val_accuracy: 0.9281\n",
      "Epoch 135/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1454 - accuracy: 0.9556\n",
      "Epoch 00135: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.1454 - accuracy: 0.9556 - val_loss: 0.2722 - val_accuracy: 0.9250\n",
      "Epoch 136/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2401 - accuracy: 0.9206\n",
      "Epoch 00136: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.2401 - accuracy: 0.9206 - val_loss: 0.2621 - val_accuracy: 0.9031\n",
      "Epoch 137/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2261 - accuracy: 0.9319\n",
      "Epoch 00137: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.2261 - accuracy: 0.9319 - val_loss: 0.2328 - val_accuracy: 0.9250\n",
      "Epoch 138/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2017 - accuracy: 0.9428\n",
      "Epoch 00138: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.2017 - accuracy: 0.9428 - val_loss: 0.3609 - val_accuracy: 0.8625\n",
      "Epoch 139/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1984 - accuracy: 0.9425\n",
      "Epoch 00139: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1984 - accuracy: 0.9425 - val_loss: 0.2175 - val_accuracy: 0.9219\n",
      "Epoch 140/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1590 - accuracy: 0.9519\n",
      "Epoch 00140: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.1590 - accuracy: 0.9519 - val_loss: 0.4630 - val_accuracy: 0.8938\n",
      "Epoch 141/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2021 - accuracy: 0.9331\n",
      "Epoch 00141: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.2021 - accuracy: 0.9331 - val_loss: 0.2937 - val_accuracy: 0.9031\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 142/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1918 - accuracy: 0.9352\n",
      "Epoch 00142: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 322ms/step - loss: 0.1918 - accuracy: 0.9352 - val_loss: 1.0100 - val_accuracy: 0.7563\n",
      "Epoch 143/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2106 - accuracy: 0.9346\n",
      "Epoch 00143: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.2106 - accuracy: 0.9346 - val_loss: 0.6912 - val_accuracy: 0.7688\n",
      "Epoch 144/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2213 - accuracy: 0.9250\n",
      "Epoch 00144: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.2213 - accuracy: 0.9250 - val_loss: 0.3154 - val_accuracy: 0.8719\n",
      "Epoch 145/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1737 - accuracy: 0.9409\n",
      "Epoch 00145: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.1737 - accuracy: 0.9409 - val_loss: 0.5899 - val_accuracy: 0.8188\n",
      "Epoch 146/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1759 - accuracy: 0.9479\n",
      "Epoch 00146: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.1759 - accuracy: 0.9479 - val_loss: 0.4135 - val_accuracy: 0.9125\n",
      "Epoch 147/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1781 - accuracy: 0.9403\n",
      "Epoch 00147: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.1781 - accuracy: 0.9403 - val_loss: 0.3925 - val_accuracy: 0.8750\n",
      "Epoch 148/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1585 - accuracy: 0.9473\n",
      "Epoch 00148: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.1585 - accuracy: 0.9473 - val_loss: 0.2560 - val_accuracy: 0.9031\n",
      "Epoch 149/200\n",
      "49/50 [============================>.] - ETA: 0s - loss: 0.1502 - accuracy: 0.9522\n",
      "Epoch 00149: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.1519 - accuracy: 0.9517 - val_loss: 0.2881 - val_accuracy: 0.8875\n",
      "Epoch 150/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1878 - accuracy: 0.9381\n",
      "Epoch 00150: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1878 - accuracy: 0.9381 - val_loss: 0.2867 - val_accuracy: 0.9062\n",
      "Epoch 151/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2021 - accuracy: 0.9543\n",
      "Epoch 00151: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.2021 - accuracy: 0.9543 - val_loss: 0.4906 - val_accuracy: 0.8750\n",
      "Epoch 152/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2038 - accuracy: 0.9375\n",
      "Epoch 00152: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 18s 354ms/step - loss: 0.2038 - accuracy: 0.9375 - val_loss: 0.7233 - val_accuracy: 0.8031\n",
      "Epoch 153/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1980 - accuracy: 0.9396\n",
      "Epoch 00153: val_accuracy did not improve from 0.92813\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.1980 - accuracy: 0.9396 - val_loss: 0.3238 - val_accuracy: 0.8938\n",
      "Epoch 154/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1671 - accuracy: 0.9381\n",
      "Epoch 00154: val_accuracy improved from 0.92813 to 0.93437, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 17s 347ms/step - loss: 0.1671 - accuracy: 0.9381 - val_loss: 0.1898 - val_accuracy: 0.9344\n",
      "Epoch 155/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1639 - accuracy: 0.9425\n",
      "Epoch 00155: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1639 - accuracy: 0.9425 - val_loss: 0.3950 - val_accuracy: 0.8562\n",
      "Epoch 156/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1545 - accuracy: 0.9473\n",
      "Epoch 00156: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1545 - accuracy: 0.9473 - val_loss: 0.2831 - val_accuracy: 0.9187\n",
      "Epoch 157/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1588 - accuracy: 0.9494\n",
      "Epoch 00157: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.1588 - accuracy: 0.9494 - val_loss: 0.5639 - val_accuracy: 0.8500\n",
      "Epoch 158/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1725 - accuracy: 0.9365\n",
      "Epoch 00158: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.1725 - accuracy: 0.9365 - val_loss: 0.2383 - val_accuracy: 0.9250\n",
      "Epoch 159/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1959 - accuracy: 0.9352\n",
      "Epoch 00159: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.1959 - accuracy: 0.9352 - val_loss: 0.3286 - val_accuracy: 0.8750\n",
      "Epoch 160/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1317 - accuracy: 0.9562\n",
      "Epoch 00160: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.1317 - accuracy: 0.9562 - val_loss: 0.2566 - val_accuracy: 0.9062\n",
      "Epoch 161/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1576 - accuracy: 0.9517\n",
      "Epoch 00161: val_accuracy improved from 0.93437 to 0.94375, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.1576 - accuracy: 0.9517 - val_loss: 0.1543 - val_accuracy: 0.9438\n",
      "Epoch 162/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2090 - accuracy: 0.9463\n",
      "Epoch 00162: val_accuracy did not improve from 0.94375\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.2090 - accuracy: 0.9463 - val_loss: 0.2303 - val_accuracy: 0.9062\n",
      "Epoch 163/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2325 - accuracy: 0.9282\n",
      "Epoch 00163: val_accuracy did not improve from 0.94375\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.2325 - accuracy: 0.9282 - val_loss: 0.3821 - val_accuracy: 0.8625\n",
      "Epoch 164/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1835 - accuracy: 0.9396\n",
      "Epoch 00164: val_accuracy did not improve from 0.94375\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1835 - accuracy: 0.9396 - val_loss: 0.2425 - val_accuracy: 0.9125\n",
      "Epoch 165/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1757 - accuracy: 0.9447\n",
      "Epoch 00165: val_accuracy did not improve from 0.94375\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.1757 - accuracy: 0.9447 - val_loss: 0.2231 - val_accuracy: 0.8969\n",
      "Epoch 166/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1815 - accuracy: 0.9413\n",
      "Epoch 00166: val_accuracy did not improve from 0.94375\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.1815 - accuracy: 0.9413 - val_loss: 0.2135 - val_accuracy: 0.9312\n",
      "Epoch 167/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1961 - accuracy: 0.9435\n",
      "Epoch 00167: val_accuracy did not improve from 0.94375\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.1961 - accuracy: 0.9435 - val_loss: 0.2769 - val_accuracy: 0.8906\n",
      "Epoch 168/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1807 - accuracy: 0.9416\n",
      "Epoch 00168: val_accuracy did not improve from 0.94375\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.1807 - accuracy: 0.9416 - val_loss: 0.6403 - val_accuracy: 0.7719\n",
      "Epoch 169/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1728 - accuracy: 0.9530\n",
      "Epoch 00169: val_accuracy did not improve from 0.94375\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.1728 - accuracy: 0.9530 - val_loss: 0.1910 - val_accuracy: 0.9250\n",
      "Epoch 170/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1675 - accuracy: 0.9479\n",
      "Epoch 00170: val_accuracy did not improve from 0.94375\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.1675 - accuracy: 0.9479 - val_loss: 0.1970 - val_accuracy: 0.9125\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 171/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1439 - accuracy: 0.9525\n",
      "Epoch 00171: val_accuracy improved from 0.94375 to 0.95312, saving model to alexnet_pretuned.h5\n",
      "50/50 [==============================] - 18s 350ms/step - loss: 0.1439 - accuracy: 0.9525 - val_loss: 0.1591 - val_accuracy: 0.9531\n",
      "Epoch 172/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1801 - accuracy: 0.9438\n",
      "Epoch 00172: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.1801 - accuracy: 0.9438 - val_loss: 0.2201 - val_accuracy: 0.9219\n",
      "Epoch 173/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1089 - accuracy: 0.9651\n",
      "Epoch 00173: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.1089 - accuracy: 0.9651 - val_loss: 0.1813 - val_accuracy: 0.9344\n",
      "Epoch 174/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0915 - accuracy: 0.9695\n",
      "Epoch 00174: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 322ms/step - loss: 0.0915 - accuracy: 0.9695 - val_loss: 0.1738 - val_accuracy: 0.9469\n",
      "Epoch 175/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1140 - accuracy: 0.9657\n",
      "Epoch 00175: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.1140 - accuracy: 0.9657 - val_loss: 0.3835 - val_accuracy: 0.8719\n",
      "Epoch 176/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1392 - accuracy: 0.9544\n",
      "Epoch 00176: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.1392 - accuracy: 0.9544 - val_loss: 0.2763 - val_accuracy: 0.9000\n",
      "Epoch 177/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1347 - accuracy: 0.9531\n",
      "Epoch 00177: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.1347 - accuracy: 0.9531 - val_loss: 0.4168 - val_accuracy: 0.9000\n",
      "Epoch 178/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1389 - accuracy: 0.9531\n",
      "Epoch 00178: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1389 - accuracy: 0.9531 - val_loss: 0.2181 - val_accuracy: 0.9312\n",
      "Epoch 179/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1323 - accuracy: 0.9556\n",
      "Epoch 00179: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.1323 - accuracy: 0.9556 - val_loss: 0.2653 - val_accuracy: 0.9125\n",
      "Epoch 180/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1551 - accuracy: 0.9473\n",
      "Epoch 00180: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.1551 - accuracy: 0.9473 - val_loss: 0.2026 - val_accuracy: 0.9375\n",
      "Epoch 181/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1377 - accuracy: 0.9519\n",
      "Epoch 00181: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.1377 - accuracy: 0.9519 - val_loss: 0.2451 - val_accuracy: 0.9250\n",
      "Epoch 182/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1306 - accuracy: 0.9593\n",
      "Epoch 00182: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.1306 - accuracy: 0.9593 - val_loss: 0.2372 - val_accuracy: 0.9250\n",
      "Epoch 183/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1223 - accuracy: 0.9625\n",
      "Epoch 00183: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 323ms/step - loss: 0.1223 - accuracy: 0.9625 - val_loss: 0.2186 - val_accuracy: 0.9187\n",
      "Epoch 184/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1463 - accuracy: 0.9530\n",
      "Epoch 00184: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1463 - accuracy: 0.9530 - val_loss: 1.6379 - val_accuracy: 0.7844\n",
      "Epoch 185/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3326 - accuracy: 0.9300\n",
      "Epoch 00185: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.3326 - accuracy: 0.9300 - val_loss: 0.3219 - val_accuracy: 0.8750\n",
      "Epoch 186/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1773 - accuracy: 0.9419\n",
      "Epoch 00186: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.1773 - accuracy: 0.9419 - val_loss: 0.2256 - val_accuracy: 0.9250\n",
      "Epoch 187/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1760 - accuracy: 0.9466\n",
      "Epoch 00187: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.1760 - accuracy: 0.9466 - val_loss: 0.2495 - val_accuracy: 0.9187\n",
      "Epoch 188/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1793 - accuracy: 0.9431\n",
      "Epoch 00188: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.1793 - accuracy: 0.9431 - val_loss: 0.6963 - val_accuracy: 0.8531\n",
      "Epoch 189/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1541 - accuracy: 0.9450\n",
      "Epoch 00189: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1541 - accuracy: 0.9450 - val_loss: 0.3363 - val_accuracy: 0.8906\n",
      "Epoch 190/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1947 - accuracy: 0.9381\n",
      "Epoch 00190: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1947 - accuracy: 0.9381 - val_loss: 0.2305 - val_accuracy: 0.9062\n",
      "Epoch 191/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1419 - accuracy: 0.9531\n",
      "Epoch 00191: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.1419 - accuracy: 0.9531 - val_loss: 0.3692 - val_accuracy: 0.8781\n",
      "Epoch 192/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1504 - accuracy: 0.9544\n",
      "Epoch 00192: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.1504 - accuracy: 0.9544 - val_loss: 0.4706 - val_accuracy: 0.8750\n",
      "Epoch 193/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1476 - accuracy: 0.9525\n",
      "Epoch 00193: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.1476 - accuracy: 0.9525 - val_loss: 0.3754 - val_accuracy: 0.8875\n",
      "Epoch 194/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1550 - accuracy: 0.9466\n",
      "Epoch 00194: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 324ms/step - loss: 0.1550 - accuracy: 0.9466 - val_loss: 0.1902 - val_accuracy: 0.9219\n",
      "Epoch 195/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1238 - accuracy: 0.9549\n",
      "Epoch 00195: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.1238 - accuracy: 0.9549 - val_loss: 0.1360 - val_accuracy: 0.9531\n",
      "Epoch 196/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2160 - accuracy: 0.9377\n",
      "Epoch 00196: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.2160 - accuracy: 0.9377 - val_loss: 0.3571 - val_accuracy: 0.8781\n",
      "Epoch 197/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1418 - accuracy: 0.9544\n",
      "Epoch 00197: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1418 - accuracy: 0.9544 - val_loss: 0.2560 - val_accuracy: 0.9125\n",
      "Epoch 198/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1256 - accuracy: 0.9600\n",
      "Epoch 00198: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.1256 - accuracy: 0.9600 - val_loss: 0.2686 - val_accuracy: 0.9125\n",
      "Epoch 199/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1425 - accuracy: 0.9563\n",
      "Epoch 00199: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.1425 - accuracy: 0.9563 - val_loss: 0.3024 - val_accuracy: 0.8781\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 200/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1203 - accuracy: 0.9575\n",
      "Epoch 00200: val_accuracy did not improve from 0.95312\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.1203 - accuracy: 0.9575 - val_loss: 0.4609 - val_accuracy: 0.8469\n",
      "Wall time: 56min\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "history = model.fit(train_generator, \n",
    "                  steps_per_epoch=50, \n",
    "                  epochs=200,\n",
    "                  validation_data=validation_generator, \n",
    "                  validation_steps=10,\n",
    "                  callbacks=callbacks_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# summarize history for accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('AlexNet Model Accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()\n",
    "# summarize history for loss\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('AlexNet Model Loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predict Test (PRETRAINED"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from matplotlib import pyplot as plt\n",
    "def plot_confusion_matrix(cm, classes,\n",
    "                        normalize=False,\n",
    "                        title='Confusion matrix',\n",
    "                        cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    plt.figure(figsize=((6, 6)))\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar(fraction=0.046, pad=0.04)\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "\n",
    "    print(cm)\n",
    "\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, cm[i, j],\n",
    "            horizontalalignment=\"center\",\n",
    "            color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')\n",
    "    #plt.savefig('img/' + title + '.png')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "load_model = keras.models.load_model(r'C:\\Users\\Julius Chris\\Desktop\\skripsi\\alexnet_pretuned.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 1s 203ms/step - loss: 0.0594 - accuracy: 0.9805\n",
      "Wall time: 3.52 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.059421852231025696, 0.9804878234863281]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "load_model.evaluate(testing_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[38  3  0  0  0]\n",
      " [ 0 40  0  0  1]\n",
      " [ 1  0 40  0  0]\n",
      " [ 0  0  0 41  0]\n",
      " [ 0  0  0  0 41]]\n",
      "                          precision    recall  f1-score   support\n",
      "\n",
      "            Dyskeratotic       0.97      0.93      0.95        41\n",
      "            Koilocytotic       0.93      0.98      0.95        41\n",
      "              Metapastic       1.00      0.98      0.99        41\n",
      "               Parabasal       1.00      1.00      1.00        41\n",
      "Superficial-Intermediate       0.98      1.00      0.99        41\n",
      "\n",
      "                accuracy                           0.98       205\n",
      "               macro avg       0.98      0.98      0.98       205\n",
      "            weighted avg       0.98      0.98      0.98       205\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "labels = list(testing_generator.class_indices.keys())   \n",
    "y_true = testing_generator.classes\n",
    "y_pred = load_model.predict_generator(testing_generator)\n",
    "rounded_pred = np.argmax(y_pred, axis=1)\n",
    "cm = confusion_matrix(y_true=y_true, y_pred=rounded_pred)\n",
    "plot_confusion_matrix(cm, labels, title=\"Alexnet Pretuned\")\n",
    "report = classification_report(y_true, rounded_pred, target_names=labels)\n",
    "print(report)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# HYPERPARAMETER TUNING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Trial 10 Complete [00h 05m 47s]\n",
      "val_accuracy: 0.8745874762535095\n",
      "\n",
      "Best val_accuracy So Far: 0.9026402831077576\n",
      "Total elapsed time: 00h 57m 21s\n",
      "INFO:tensorflow:Oracle triggered exit\n"
     ]
    }
   ],
   "source": [
    "# Create the keras tuner model.\n",
    "class MyHyperModel(HyperModel):\n",
    "    \n",
    "    def build(self, hp):\n",
    "        model = keras.models.Sequential([\n",
    "            keras.layers.Conv2D(filters=96, kernel_size=(11,11), strides=(4,4), activation='relu', input_shape=(224,224,3)),\n",
    "            keras.layers.BatchNormalization(),\n",
    "            keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),\n",
    "            keras.layers.Conv2D(filters=256, kernel_size=(5,5), strides=(1,1), activation='relu', padding=\"same\"),\n",
    "            keras.layers.BatchNormalization(),\n",
    "            keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),\n",
    "            keras.layers.Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), activation='relu', padding=\"same\"),\n",
    "            keras.layers.BatchNormalization(),\n",
    "            keras.layers.Conv2D(filters=384, kernel_size=(1,1), strides=(1,1), activation='relu', padding=\"same\"),\n",
    "            keras.layers.BatchNormalization(),\n",
    "            keras.layers.Conv2D(filters=256, kernel_size=(1,1), strides=(1,1), activation='relu', padding=\"same\"),\n",
    "            keras.layers.BatchNormalization(),\n",
    "            keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),\n",
    "            keras.layers.Flatten(),\n",
    "            keras.layers.Dense(4096, activation='relu'),\n",
    "            keras.layers.Dropout(hp.Choice('dropout', values=[0.2,0.3,0.4,0.5])),\n",
    "            keras.layers.Dense(4096, activation='relu'),\n",
    "            keras.layers.Dropout(hp.Choice('dropout', values=[0.2,0.3,0.4,0.5])),\n",
    "            keras.layers.Dense(5, 'softmax')\n",
    "        ])\n",
    "\n",
    "        model.compile(\n",
    "            optimizer=hp.Choice('optimizer', values= ['Adam', 'Adadelta', 'Adamax']),\n",
    "            loss='categorical_crossentropy',\n",
    "            metrics=['accuracy'])\n",
    "        return model\n",
    "\n",
    "hypermodel = MyHyperModel()\n",
    "\n",
    "tuner = BayesianOptimization(\n",
    "    hypermodel,\n",
    "    objective=Objective('val_accuracy', direction=\"max\"),\n",
    "    num_initial_points=50,\n",
    "    max_trials=20,\n",
    "    directory='./',\n",
    "    project_name='alexnet_hyperparameter')\n",
    "\n",
    "tuner.search(train_generator,\n",
    "             epochs=10, validation_data=validation_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Results summary\n",
      "Results in ./alexnet_hyperparameter\n",
      "Showing 10 best trials\n",
      "Objective(name='val_accuracy', direction='max')\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "dropout: 0.2\n",
      "optimizer: Adamax\n",
      "Score: 0.9026402831077576\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "dropout: 0.3\n",
      "optimizer: Adadelta\n",
      "Score: 0.8745874762535095\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "dropout: 0.2\n",
      "optimizer: Adadelta\n",
      "Score: 0.8745874762535095\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "dropout: 0.4\n",
      "optimizer: Adamax\n",
      "Score: 0.8745874762535095\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "dropout: 0.2\n",
      "optimizer: Adam\n",
      "Score: 0.8696369528770447\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "dropout: 0.4\n",
      "optimizer: Adadelta\n",
      "Score: 0.8613861203193665\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "dropout: 0.5\n",
      "optimizer: Adam\n",
      "Score: 0.8547855019569397\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "dropout: 0.5\n",
      "optimizer: Adadelta\n",
      "Score: 0.8514851331710815\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "dropout: 0.4\n",
      "optimizer: Adam\n",
      "Score: 0.8481848239898682\n",
      "Trial summary\n",
      "Hyperparameters:\n",
      "dropout: 0.3\n",
      "optimizer: Adam\n",
      "Score: 0.7953795194625854\n"
     ]
    }
   ],
   "source": [
    "tuner.results_summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d (Conv2D)              (None, 54, 54, 96)        34944     \n",
      "_________________________________________________________________\n",
      "batch_normalization (BatchNo (None, 54, 54, 96)        384       \n",
      "_________________________________________________________________\n",
      "max_pooling2d (MaxPooling2D) (None, 26, 26, 96)        0         \n",
      "_________________________________________________________________\n",
      "conv2d_1 (Conv2D)            (None, 26, 26, 256)       614656    \n",
      "_________________________________________________________________\n",
      "batch_normalization_1 (Batch (None, 26, 26, 256)       1024      \n",
      "_________________________________________________________________\n",
      "max_pooling2d_1 (MaxPooling2 (None, 12, 12, 256)       0         \n",
      "_________________________________________________________________\n",
      "conv2d_2 (Conv2D)            (None, 12, 12, 384)       885120    \n",
      "_________________________________________________________________\n",
      "batch_normalization_2 (Batch (None, 12, 12, 384)       1536      \n",
      "_________________________________________________________________\n",
      "conv2d_3 (Conv2D)            (None, 12, 12, 384)       147840    \n",
      "_________________________________________________________________\n",
      "batch_normalization_3 (Batch (None, 12, 12, 384)       1536      \n",
      "_________________________________________________________________\n",
      "conv2d_4 (Conv2D)            (None, 12, 12, 256)       98560     \n",
      "_________________________________________________________________\n",
      "batch_normalization_4 (Batch (None, 12, 12, 256)       1024      \n",
      "_________________________________________________________________\n",
      "max_pooling2d_2 (MaxPooling2 (None, 5, 5, 256)         0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 6400)              0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 4096)              26218496  \n",
      "_________________________________________________________________\n",
      "dropout (Dropout)            (None, 4096)              0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 4096)              16781312  \n",
      "_________________________________________________________________\n",
      "dropout_1 (Dropout)          (None, 4096)              0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 5)                 20485     \n",
      "=================================================================\n",
      "Total params: 44,806,917\n",
      "Trainable params: 44,804,165\n",
      "Non-trainable params: 2,752\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "models = tuner.get_best_models(num_models=1)\n",
    "\n",
    "models[0].summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# AFTER TUNING MODEL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "tuned_model = keras.models.Sequential([\n",
    "    keras.layers.Conv2D(filters=96, kernel_size=(11,11), strides=(4,4), activation='relu', input_shape=(224,224,3)),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),\n",
    "    keras.layers.Conv2D(filters=256, kernel_size=(5,5), strides=(1,1), activation='relu', padding=\"same\"),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),\n",
    "    keras.layers.Conv2D(filters=384, kernel_size=(3,3), strides=(1,1), activation='relu', padding=\"same\"),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.Conv2D(filters=384, kernel_size=(1,1), strides=(1,1), activation='relu', padding=\"same\"),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.Conv2D(filters=256, kernel_size=(1,1), strides=(1,1), activation='relu', padding=\"same\"),\n",
    "    keras.layers.BatchNormalization(),\n",
    "    keras.layers.MaxPool2D(pool_size=(3,3), strides=(2,2)),\n",
    "    keras.layers.Flatten(),\n",
    "    keras.layers.Dense(4096, activation='relu'),\n",
    "    keras.layers.Dropout(0.2),\n",
    "    keras.layers.Dense(4096, activation='relu'),\n",
    "    keras.layers.Dropout(0.2),\n",
    "    keras.layers.Dense(5, 'softmax')\n",
    "])\n",
    "\n",
    "tuned_model.compile(keras.optimizers.Adamax(lr=0.0001, beta_1=0.9, beta_2=0.999, epsilon=1e-08, decay=0.0),\n",
    "    loss='categorical_crossentropy',\n",
    "    metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "filepath = \"alexnet_tuned.h5\"\n",
    "checkpoint = ModelCheckpoint(filepath,monitor='val_accuracy',verbose=1,save_best_only=True,mode='max')\n",
    "callbacks_list = [checkpoint]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 1.1879 - accuracy: 0.7008\n",
      "Epoch 00001: val_accuracy improved from -inf to 0.00000, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 17s 346ms/step - loss: 1.1879 - accuracy: 0.7008 - val_loss: 2.5802 - val_accuracy: 0.0000e+00\n",
      "Epoch 2/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4984 - accuracy: 0.8225\n",
      "Epoch 00002: val_accuracy did not improve from 0.00000\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.4984 - accuracy: 0.8225 - val_loss: 3.8382 - val_accuracy: 0.0000e+00\n",
      "Epoch 3/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.4502 - accuracy: 0.8437\n",
      "Epoch 00003: val_accuracy did not improve from 0.00000\n",
      "50/50 [==============================] - 16s 318ms/step - loss: 0.4502 - accuracy: 0.8437 - val_loss: 5.0643 - val_accuracy: 0.0000e+00\n",
      "Epoch 4/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3842 - accuracy: 0.8666\n",
      "Epoch 00004: val_accuracy did not improve from 0.00000\n",
      "50/50 [==============================] - 16s 321ms/step - loss: 0.3842 - accuracy: 0.8666 - val_loss: 4.3376 - val_accuracy: 0.0000e+00\n",
      "Epoch 5/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3712 - accuracy: 0.8634\n",
      "Epoch 00005: val_accuracy did not improve from 0.00000\n",
      "50/50 [==============================] - 16s 321ms/step - loss: 0.3712 - accuracy: 0.8634 - val_loss: 5.7063 - val_accuracy: 0.0000e+00\n",
      "Epoch 6/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3177 - accuracy: 0.8818\n",
      "Epoch 00006: val_accuracy did not improve from 0.00000\n",
      "50/50 [==============================] - 16s 319ms/step - loss: 0.3177 - accuracy: 0.8818 - val_loss: 4.8956 - val_accuracy: 0.0000e+00\n",
      "Epoch 7/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3209 - accuracy: 0.8850\n",
      "Epoch 00007: val_accuracy improved from 0.00000 to 0.02500, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 20s 394ms/step - loss: 0.3209 - accuracy: 0.8850 - val_loss: 4.7678 - val_accuracy: 0.0250\n",
      "Epoch 8/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2781 - accuracy: 0.9044\n",
      "Epoch 00008: val_accuracy improved from 0.02500 to 0.10938, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 17s 350ms/step - loss: 0.2781 - accuracy: 0.9044 - val_loss: 3.6786 - val_accuracy: 0.1094\n",
      "Epoch 9/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.3127 - accuracy: 0.8882\n",
      "Epoch 00009: val_accuracy improved from 0.10938 to 0.16875, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.3127 - accuracy: 0.8882 - val_loss: 2.7591 - val_accuracy: 0.1688\n",
      "Epoch 10/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2487 - accuracy: 0.9193\n",
      "Epoch 00010: val_accuracy improved from 0.16875 to 0.49687, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.2487 - accuracy: 0.9193 - val_loss: 1.8158 - val_accuracy: 0.4969\n",
      "Epoch 11/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2491 - accuracy: 0.9231\n",
      "Epoch 00011: val_accuracy improved from 0.49687 to 0.52500, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 18s 351ms/step - loss: 0.2491 - accuracy: 0.9231 - val_loss: 1.2328 - val_accuracy: 0.5250\n",
      "Epoch 12/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2288 - accuracy: 0.9263\n",
      "Epoch 00012: val_accuracy improved from 0.52500 to 0.73125, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 17s 345ms/step - loss: 0.2288 - accuracy: 0.9263 - val_loss: 0.6834 - val_accuracy: 0.7312\n",
      "Epoch 13/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1937 - accuracy: 0.9306\n",
      "Epoch 00013: val_accuracy improved from 0.73125 to 0.80313, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 17s 348ms/step - loss: 0.1937 - accuracy: 0.9306 - val_loss: 0.5318 - val_accuracy: 0.8031\n",
      "Epoch 14/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2231 - accuracy: 0.9200\n",
      "Epoch 00014: val_accuracy improved from 0.80313 to 0.86563, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 18s 351ms/step - loss: 0.2231 - accuracy: 0.9200 - val_loss: 0.4022 - val_accuracy: 0.8656\n",
      "Epoch 15/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.2102 - accuracy: 0.9314\n",
      "Epoch 00015: val_accuracy did not improve from 0.86563\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.2102 - accuracy: 0.9314 - val_loss: 0.3564 - val_accuracy: 0.8594\n",
      "Epoch 16/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1991 - accuracy: 0.9301\n",
      "Epoch 00016: val_accuracy did not improve from 0.86563\n",
      "50/50 [==============================] - 16s 325ms/step - loss: 0.1991 - accuracy: 0.9301 - val_loss: 0.4991 - val_accuracy: 0.8500\n",
      "Epoch 17/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1590 - accuracy: 0.9413\n",
      "Epoch 00017: val_accuracy improved from 0.86563 to 0.89375, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 18s 351ms/step - loss: 0.1590 - accuracy: 0.9413 - val_loss: 0.2895 - val_accuracy: 0.8938\n",
      "Epoch 18/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1926 - accuracy: 0.9350\n",
      "Epoch 00018: val_accuracy did not improve from 0.89375\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.1926 - accuracy: 0.9350 - val_loss: 0.4011 - val_accuracy: 0.8469\n",
      "Epoch 19/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1870 - accuracy: 0.9365\n",
      "Epoch 00019: val_accuracy did not improve from 0.89375\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.1870 - accuracy: 0.9365 - val_loss: 0.3702 - val_accuracy: 0.8656\n",
      "Epoch 20/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1756 - accuracy: 0.9381\n",
      "Epoch 00020: val_accuracy did not improve from 0.89375\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.1756 - accuracy: 0.9381 - val_loss: 0.2828 - val_accuracy: 0.8875\n",
      "Epoch 21/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1722 - accuracy: 0.9419\n",
      "Epoch 00021: val_accuracy did not improve from 0.89375\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.1722 - accuracy: 0.9419 - val_loss: 0.3677 - val_accuracy: 0.8625\n",
      "Epoch 22/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1529 - accuracy: 0.9425\n",
      "Epoch 00022: val_accuracy improved from 0.89375 to 0.93125, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 18s 352ms/step - loss: 0.1529 - accuracy: 0.9425 - val_loss: 0.2192 - val_accuracy: 0.9312\n",
      "Epoch 23/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1333 - accuracy: 0.9524\n",
      "Epoch 00023: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.1333 - accuracy: 0.9524 - val_loss: 0.2755 - val_accuracy: 0.8844\n",
      "Epoch 24/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1527 - accuracy: 0.9492\n",
      "Epoch 00024: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.1527 - accuracy: 0.9492 - val_loss: 0.4099 - val_accuracy: 0.8562\n",
      "Epoch 25/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1554 - accuracy: 0.9419\n",
      "Epoch 00025: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.1554 - accuracy: 0.9419 - val_loss: 0.2532 - val_accuracy: 0.9125\n",
      "Epoch 26/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1315 - accuracy: 0.9569\n",
      "Epoch 00026: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.1315 - accuracy: 0.9569 - val_loss: 0.2848 - val_accuracy: 0.9000\n",
      "Epoch 27/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1659 - accuracy: 0.9466\n",
      "Epoch 00027: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.1659 - accuracy: 0.9466 - val_loss: 0.2837 - val_accuracy: 0.8969\n",
      "Epoch 28/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1951 - accuracy: 0.9369\n",
      "Epoch 00028: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.1951 - accuracy: 0.9369 - val_loss: 0.2625 - val_accuracy: 0.9031\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 29/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1163 - accuracy: 0.9581\n",
      "Epoch 00029: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.1163 - accuracy: 0.9581 - val_loss: 0.2822 - val_accuracy: 0.8938\n",
      "Epoch 30/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1171 - accuracy: 0.9562\n",
      "Epoch 00030: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.1171 - accuracy: 0.9562 - val_loss: 0.2981 - val_accuracy: 0.9000\n",
      "Epoch 31/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1252 - accuracy: 0.9581\n",
      "Epoch 00031: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.1252 - accuracy: 0.9581 - val_loss: 0.3206 - val_accuracy: 0.8844\n",
      "Epoch 32/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1119 - accuracy: 0.9606\n",
      "Epoch 00032: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.1119 - accuracy: 0.9606 - val_loss: 0.3110 - val_accuracy: 0.8781\n",
      "Epoch 33/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1395 - accuracy: 0.9517\n",
      "Epoch 00033: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.1395 - accuracy: 0.9517 - val_loss: 0.2238 - val_accuracy: 0.9156\n",
      "Epoch 34/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1182 - accuracy: 0.9563\n",
      "Epoch 00034: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.1182 - accuracy: 0.9563 - val_loss: 0.5488 - val_accuracy: 0.8156\n",
      "Epoch 35/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1573 - accuracy: 0.9431\n",
      "Epoch 00035: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 17s 339ms/step - loss: 0.1573 - accuracy: 0.9431 - val_loss: 0.2839 - val_accuracy: 0.9062\n",
      "Epoch 36/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1107 - accuracy: 0.9574\n",
      "Epoch 00036: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.1107 - accuracy: 0.9574 - val_loss: 0.2082 - val_accuracy: 0.9125\n",
      "Epoch 37/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1089 - accuracy: 0.9581\n",
      "Epoch 00037: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 18s 366ms/step - loss: 0.1089 - accuracy: 0.9581 - val_loss: 0.2174 - val_accuracy: 0.9219\n",
      "Epoch 38/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1163 - accuracy: 0.9594\n",
      "Epoch 00038: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 17s 338ms/step - loss: 0.1163 - accuracy: 0.9594 - val_loss: 0.2403 - val_accuracy: 0.9156\n",
      "Epoch 39/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1183 - accuracy: 0.9538\n",
      "Epoch 00039: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 17s 337ms/step - loss: 0.1183 - accuracy: 0.9538 - val_loss: 0.4427 - val_accuracy: 0.8562\n",
      "Epoch 40/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1133 - accuracy: 0.9625\n",
      "Epoch 00040: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.1133 - accuracy: 0.9625 - val_loss: 0.3090 - val_accuracy: 0.8875\n",
      "Epoch 41/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1033 - accuracy: 0.9651\n",
      "Epoch 00041: val_accuracy did not improve from 0.93125\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.1033 - accuracy: 0.9651 - val_loss: 0.1809 - val_accuracy: 0.9250\n",
      "Epoch 42/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0949 - accuracy: 0.9700\n",
      "Epoch 00042: val_accuracy improved from 0.93125 to 0.93437, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 18s 358ms/step - loss: 0.0949 - accuracy: 0.9700 - val_loss: 0.2160 - val_accuracy: 0.9344\n",
      "Epoch 43/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1255 - accuracy: 0.9581\n",
      "Epoch 00043: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.1255 - accuracy: 0.9581 - val_loss: 0.1984 - val_accuracy: 0.9281\n",
      "Epoch 44/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1096 - accuracy: 0.9588\n",
      "Epoch 00044: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.1096 - accuracy: 0.9588 - val_loss: 0.2947 - val_accuracy: 0.8969\n",
      "Epoch 45/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1060 - accuracy: 0.9632\n",
      "Epoch 00045: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.1060 - accuracy: 0.9632 - val_loss: 0.1847 - val_accuracy: 0.9219\n",
      "Epoch 46/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0844 - accuracy: 0.9694\n",
      "Epoch 00046: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 17s 339ms/step - loss: 0.0844 - accuracy: 0.9694 - val_loss: 0.2100 - val_accuracy: 0.9344\n",
      "Epoch 47/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.1148 - accuracy: 0.9632\n",
      "Epoch 00047: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.1148 - accuracy: 0.9632 - val_loss: 0.2515 - val_accuracy: 0.8969\n",
      "Epoch 48/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0802 - accuracy: 0.9681\n",
      "Epoch 00048: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0802 - accuracy: 0.9681 - val_loss: 0.2289 - val_accuracy: 0.9219\n",
      "Epoch 49/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0912 - accuracy: 0.9676\n",
      "Epoch 00049: val_accuracy did not improve from 0.93437\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.0912 - accuracy: 0.9676 - val_loss: 0.2045 - val_accuracy: 0.9312\n",
      "Epoch 50/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0882 - accuracy: 0.9675\n",
      "Epoch 00050: val_accuracy improved from 0.93437 to 0.94063, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 18s 360ms/step - loss: 0.0882 - accuracy: 0.9675 - val_loss: 0.1700 - val_accuracy: 0.9406\n",
      "Epoch 51/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0878 - accuracy: 0.9714\n",
      "Epoch 00051: val_accuracy did not improve from 0.94063\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.0878 - accuracy: 0.9714 - val_loss: 0.4682 - val_accuracy: 0.8406\n",
      "Epoch 52/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0836 - accuracy: 0.9708\n",
      "Epoch 00052: val_accuracy did not improve from 0.94063\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.0836 - accuracy: 0.9708 - val_loss: 0.1699 - val_accuracy: 0.9406\n",
      "Epoch 53/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0539 - accuracy: 0.9819\n",
      "Epoch 00053: val_accuracy did not improve from 0.94063\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0539 - accuracy: 0.9819 - val_loss: 0.1785 - val_accuracy: 0.9312\n",
      "Epoch 54/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0822 - accuracy: 0.9737\n",
      "Epoch 00054: val_accuracy did not improve from 0.94063\n",
      "50/50 [==============================] - 17s 339ms/step - loss: 0.0822 - accuracy: 0.9737 - val_loss: 0.2585 - val_accuracy: 0.9031\n",
      "Epoch 55/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0878 - accuracy: 0.9670\n",
      "Epoch 00055: val_accuracy did not improve from 0.94063\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.0878 - accuracy: 0.9670 - val_loss: 0.4017 - val_accuracy: 0.8750\n",
      "Epoch 56/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0667 - accuracy: 0.9769\n",
      "Epoch 00056: val_accuracy did not improve from 0.94063\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0667 - accuracy: 0.9769 - val_loss: 0.2437 - val_accuracy: 0.9094\n",
      "Epoch 57/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0573 - accuracy: 0.9800\n",
      "Epoch 00057: val_accuracy did not improve from 0.94063\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0573 - accuracy: 0.9800 - val_loss: 0.2367 - val_accuracy: 0.9125\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 58/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0745 - accuracy: 0.9744\n",
      "Epoch 00058: val_accuracy did not improve from 0.94063\n",
      "50/50 [==============================] - 17s 338ms/step - loss: 0.0745 - accuracy: 0.9744 - val_loss: 0.2670 - val_accuracy: 0.9187\n",
      "Epoch 59/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0676 - accuracy: 0.9695\n",
      "Epoch 00059: val_accuracy did not improve from 0.94063\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.0676 - accuracy: 0.9695 - val_loss: 0.2949 - val_accuracy: 0.9031\n",
      "Epoch 60/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0726 - accuracy: 0.9746\n",
      "Epoch 00060: val_accuracy did not improve from 0.94063\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.0726 - accuracy: 0.9746 - val_loss: 0.1803 - val_accuracy: 0.9406\n",
      "Epoch 61/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0682 - accuracy: 0.9769\n",
      "Epoch 00061: val_accuracy improved from 0.94063 to 0.95625, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 18s 355ms/step - loss: 0.0682 - accuracy: 0.9769 - val_loss: 0.1562 - val_accuracy: 0.9563\n",
      "Epoch 62/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0527 - accuracy: 0.9837\n",
      "Epoch 00062: val_accuracy did not improve from 0.95625\n",
      "50/50 [==============================] - 17s 337ms/step - loss: 0.0527 - accuracy: 0.9837 - val_loss: 0.1993 - val_accuracy: 0.9375\n",
      "Epoch 63/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0443 - accuracy: 0.9831\n",
      "Epoch 00063: val_accuracy did not improve from 0.95625\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0443 - accuracy: 0.9831 - val_loss: 0.2460 - val_accuracy: 0.9250\n",
      "Epoch 64/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0657 - accuracy: 0.9769\n",
      "Epoch 00064: val_accuracy did not improve from 0.95625\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.0657 - accuracy: 0.9769 - val_loss: 0.1706 - val_accuracy: 0.9375\n",
      "Epoch 65/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0535 - accuracy: 0.9819\n",
      "Epoch 00065: val_accuracy did not improve from 0.95625\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0535 - accuracy: 0.9819 - val_loss: 0.3404 - val_accuracy: 0.8875\n",
      "Epoch 66/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0902 - accuracy: 0.9681\n",
      "Epoch 00066: val_accuracy did not improve from 0.95625\n",
      "50/50 [==============================] - 17s 336ms/step - loss: 0.0902 - accuracy: 0.9681 - val_loss: 0.3888 - val_accuracy: 0.8875\n",
      "Epoch 67/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0549 - accuracy: 0.9790\n",
      "Epoch 00067: val_accuracy did not improve from 0.95625\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.0549 - accuracy: 0.9790 - val_loss: 0.1803 - val_accuracy: 0.9406\n",
      "Epoch 68/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0562 - accuracy: 0.9794\n",
      "Epoch 00068: val_accuracy did not improve from 0.95625\n",
      "50/50 [==============================] - 17s 336ms/step - loss: 0.0562 - accuracy: 0.9794 - val_loss: 0.2387 - val_accuracy: 0.9219\n",
      "Epoch 69/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0589 - accuracy: 0.9790\n",
      "Epoch 00069: val_accuracy did not improve from 0.95625\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0589 - accuracy: 0.9790 - val_loss: 0.2270 - val_accuracy: 0.9250\n",
      "Epoch 70/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0532 - accuracy: 0.9831\n",
      "Epoch 00070: val_accuracy did not improve from 0.95625\n",
      "50/50 [==============================] - 17s 338ms/step - loss: 0.0532 - accuracy: 0.9831 - val_loss: 0.2591 - val_accuracy: 0.9187\n",
      "Epoch 71/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0320 - accuracy: 0.9894\n",
      "Epoch 00071: val_accuracy did not improve from 0.95625\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.0320 - accuracy: 0.9894 - val_loss: 0.2343 - val_accuracy: 0.9219\n",
      "Epoch 72/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0433 - accuracy: 0.9856\n",
      "Epoch 00072: val_accuracy improved from 0.95625 to 0.95938, saving model to alexnet_tuned.h5\n",
      "50/50 [==============================] - 18s 368ms/step - loss: 0.0433 - accuracy: 0.9856 - val_loss: 0.1383 - val_accuracy: 0.9594\n",
      "Epoch 73/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0542 - accuracy: 0.9794\n",
      "Epoch 00073: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 337ms/step - loss: 0.0542 - accuracy: 0.9794 - val_loss: 0.4282 - val_accuracy: 0.8875\n",
      "Epoch 74/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0634 - accuracy: 0.9744\n",
      "Epoch 00074: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0634 - accuracy: 0.9744 - val_loss: 0.2146 - val_accuracy: 0.9312\n",
      "Epoch 75/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0807 - accuracy: 0.9731\n",
      "Epoch 00075: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 336ms/step - loss: 0.0807 - accuracy: 0.9731 - val_loss: 0.2934 - val_accuracy: 0.9250\n",
      "Epoch 76/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0643 - accuracy: 0.9744\n",
      "Epoch 00076: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0643 - accuracy: 0.9744 - val_loss: 0.2216 - val_accuracy: 0.9375\n",
      "Epoch 77/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0462 - accuracy: 0.9848\n",
      "Epoch 00077: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.0462 - accuracy: 0.9848 - val_loss: 0.3873 - val_accuracy: 0.8813\n",
      "Epoch 78/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0498 - accuracy: 0.9816\n",
      "Epoch 00078: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.0498 - accuracy: 0.9816 - val_loss: 0.4186 - val_accuracy: 0.8781\n",
      "Epoch 79/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0606 - accuracy: 0.9756\n",
      "Epoch 00079: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0606 - accuracy: 0.9756 - val_loss: 0.1593 - val_accuracy: 0.9438\n",
      "Epoch 80/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0440 - accuracy: 0.9873\n",
      "Epoch 00080: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.0440 - accuracy: 0.9873 - val_loss: 0.2320 - val_accuracy: 0.9187\n",
      "Epoch 81/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0559 - accuracy: 0.9803\n",
      "Epoch 00081: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.0559 - accuracy: 0.9803 - val_loss: 0.3738 - val_accuracy: 0.8844\n",
      "Epoch 82/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0903 - accuracy: 0.9694\n",
      "Epoch 00082: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0903 - accuracy: 0.9694 - val_loss: 0.1769 - val_accuracy: 0.9375\n",
      "Epoch 83/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0783 - accuracy: 0.9727\n",
      "Epoch 00083: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 326ms/step - loss: 0.0783 - accuracy: 0.9727 - val_loss: 0.1799 - val_accuracy: 0.9469\n",
      "Epoch 84/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0469 - accuracy: 0.9831\n",
      "Epoch 00084: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0469 - accuracy: 0.9831 - val_loss: 0.1252 - val_accuracy: 0.9438\n",
      "Epoch 85/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0344 - accuracy: 0.9848\n",
      "Epoch 00085: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 336ms/step - loss: 0.0344 - accuracy: 0.9848 - val_loss: 0.1402 - val_accuracy: 0.9500\n",
      "Epoch 86/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0430 - accuracy: 0.9812\n",
      "Epoch 00086: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0430 - accuracy: 0.9812 - val_loss: 0.2380 - val_accuracy: 0.9062\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 87/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0454 - accuracy: 0.9819\n",
      "Epoch 00087: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.0454 - accuracy: 0.9819 - val_loss: 0.2506 - val_accuracy: 0.9125\n",
      "Epoch 88/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0287 - accuracy: 0.9898\n",
      "Epoch 00088: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.0287 - accuracy: 0.9898 - val_loss: 0.1511 - val_accuracy: 0.9563\n",
      "Epoch 89/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0447 - accuracy: 0.9835\n",
      "Epoch 00089: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0447 - accuracy: 0.9835 - val_loss: 0.2316 - val_accuracy: 0.9312\n",
      "Epoch 90/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0416 - accuracy: 0.9812\n",
      "Epoch 00090: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0416 - accuracy: 0.9812 - val_loss: 0.1906 - val_accuracy: 0.9406\n",
      "Epoch 91/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0320 - accuracy: 0.9900\n",
      "Epoch 00091: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0320 - accuracy: 0.9900 - val_loss: 0.1961 - val_accuracy: 0.9250\n",
      "Epoch 92/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0469 - accuracy: 0.9841\n",
      "Epoch 00092: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.0469 - accuracy: 0.9841 - val_loss: 0.2253 - val_accuracy: 0.9406\n",
      "Epoch 93/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0278 - accuracy: 0.9894\n",
      "Epoch 00093: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 337ms/step - loss: 0.0278 - accuracy: 0.9894 - val_loss: 0.1750 - val_accuracy: 0.9438\n",
      "Epoch 94/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0243 - accuracy: 0.9937\n",
      "Epoch 00094: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0243 - accuracy: 0.9937 - val_loss: 0.1892 - val_accuracy: 0.9406\n",
      "Epoch 95/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0365 - accuracy: 0.9873\n",
      "Epoch 00095: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.0365 - accuracy: 0.9873 - val_loss: 0.1460 - val_accuracy: 0.9500\n",
      "Epoch 96/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0255 - accuracy: 0.9911\n",
      "Epoch 00096: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.0255 - accuracy: 0.9911 - val_loss: 0.2840 - val_accuracy: 0.9156\n",
      "Epoch 97/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0507 - accuracy: 0.9790\n",
      "Epoch 00097: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0507 - accuracy: 0.9790 - val_loss: 0.1781 - val_accuracy: 0.9500\n",
      "Epoch 98/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0364 - accuracy: 0.9881\n",
      "Epoch 00098: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0364 - accuracy: 0.9881 - val_loss: 0.1787 - val_accuracy: 0.9438\n",
      "Epoch 99/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0307 - accuracy: 0.9894\n",
      "Epoch 00099: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0307 - accuracy: 0.9894 - val_loss: 0.2026 - val_accuracy: 0.9281\n",
      "Epoch 100/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0383 - accuracy: 0.9850\n",
      "Epoch 00100: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0383 - accuracy: 0.9850 - val_loss: 0.1641 - val_accuracy: 0.9469\n",
      "Epoch 101/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0353 - accuracy: 0.9900\n",
      "Epoch 00101: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 338ms/step - loss: 0.0353 - accuracy: 0.9900 - val_loss: 0.2131 - val_accuracy: 0.9344\n",
      "Epoch 102/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0400 - accuracy: 0.9873\n",
      "Epoch 00102: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0400 - accuracy: 0.9873 - val_loss: 0.2424 - val_accuracy: 0.9375\n",
      "Epoch 103/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0518 - accuracy: 0.9841\n",
      "Epoch 00103: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0518 - accuracy: 0.9841 - val_loss: 0.1919 - val_accuracy: 0.9312\n",
      "Epoch 104/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0343 - accuracy: 0.9879\n",
      "Epoch 00104: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0343 - accuracy: 0.9879 - val_loss: 0.1884 - val_accuracy: 0.9500\n",
      "Epoch 105/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0350 - accuracy: 0.9867\n",
      "Epoch 00105: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.0350 - accuracy: 0.9867 - val_loss: 0.1702 - val_accuracy: 0.9500\n",
      "Epoch 106/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0360 - accuracy: 0.9887\n",
      "Epoch 00106: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0360 - accuracy: 0.9887 - val_loss: 0.2081 - val_accuracy: 0.9438\n",
      "Epoch 107/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0306 - accuracy: 0.9894\n",
      "Epoch 00107: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 349ms/step - loss: 0.0306 - accuracy: 0.9894 - val_loss: 0.2196 - val_accuracy: 0.9312\n",
      "Epoch 108/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0432 - accuracy: 0.9822\n",
      "Epoch 00108: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0432 - accuracy: 0.9822 - val_loss: 0.2430 - val_accuracy: 0.9000\n",
      "Epoch 109/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0343 - accuracy: 0.9875\n",
      "Epoch 00109: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 340ms/step - loss: 0.0343 - accuracy: 0.9875 - val_loss: 0.2445 - val_accuracy: 0.9219\n",
      "Epoch 110/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0454 - accuracy: 0.9862\n",
      "Epoch 00110: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.0454 - accuracy: 0.9862 - val_loss: 0.1672 - val_accuracy: 0.9312\n",
      "Epoch 111/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0249 - accuracy: 0.9925\n",
      "Epoch 00111: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0249 - accuracy: 0.9925 - val_loss: 0.2489 - val_accuracy: 0.9344\n",
      "Epoch 112/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0281 - accuracy: 0.9881\n",
      "Epoch 00112: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 338ms/step - loss: 0.0281 - accuracy: 0.9881 - val_loss: 0.1808 - val_accuracy: 0.9375\n",
      "Epoch 113/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0225 - accuracy: 0.9911\n",
      "Epoch 00113: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.0225 - accuracy: 0.9911 - val_loss: 0.2418 - val_accuracy: 0.9438\n",
      "Epoch 114/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0237 - accuracy: 0.9930\n",
      "Epoch 00114: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0237 - accuracy: 0.9930 - val_loss: 0.2414 - val_accuracy: 0.9344\n",
      "Epoch 115/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0211 - accuracy: 0.9919\n",
      "Epoch 00115: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0211 - accuracy: 0.9919 - val_loss: 0.1937 - val_accuracy: 0.9375\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 116/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0176 - accuracy: 0.9944\n",
      "Epoch 00116: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 340ms/step - loss: 0.0176 - accuracy: 0.9944 - val_loss: 0.4549 - val_accuracy: 0.8719\n",
      "Epoch 117/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0169 - accuracy: 0.9962\n",
      "Epoch 00117: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.0169 - accuracy: 0.9962 - val_loss: 0.1600 - val_accuracy: 0.9438\n",
      "Epoch 118/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0179 - accuracy: 0.9944\n",
      "Epoch 00118: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0179 - accuracy: 0.9944 - val_loss: 0.2348 - val_accuracy: 0.9406\n",
      "Epoch 119/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0245 - accuracy: 0.9912\n",
      "Epoch 00119: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0245 - accuracy: 0.9912 - val_loss: 0.2533 - val_accuracy: 0.9281\n",
      "Epoch 120/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0398 - accuracy: 0.9856\n",
      "Epoch 00120: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 337ms/step - loss: 0.0398 - accuracy: 0.9856 - val_loss: 0.3160 - val_accuracy: 0.9094\n",
      "Epoch 121/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0239 - accuracy: 0.9898\n",
      "Epoch 00121: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0239 - accuracy: 0.9898 - val_loss: 0.2158 - val_accuracy: 0.9438\n",
      "Epoch 122/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0242 - accuracy: 0.9931\n",
      "Epoch 00122: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0242 - accuracy: 0.9931 - val_loss: 0.3403 - val_accuracy: 0.9000\n",
      "Epoch 123/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0306 - accuracy: 0.9898\n",
      "Epoch 00123: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.0306 - accuracy: 0.9898 - val_loss: 0.2862 - val_accuracy: 0.9250\n",
      "Epoch 124/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0399 - accuracy: 0.9867\n",
      "Epoch 00124: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0399 - accuracy: 0.9867 - val_loss: 0.3437 - val_accuracy: 0.9156\n",
      "Epoch 125/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0222 - accuracy: 0.9917\n",
      "Epoch 00125: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0222 - accuracy: 0.9917 - val_loss: 0.2186 - val_accuracy: 0.9594\n",
      "Epoch 126/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0301 - accuracy: 0.9887\n",
      "Epoch 00126: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0301 - accuracy: 0.9887 - val_loss: 0.2094 - val_accuracy: 0.9406\n",
      "Epoch 127/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0232 - accuracy: 0.9925\n",
      "Epoch 00127: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0232 - accuracy: 0.9925 - val_loss: 0.3103 - val_accuracy: 0.9250\n",
      "Epoch 128/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0254 - accuracy: 0.9894\n",
      "Epoch 00128: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 337ms/step - loss: 0.0254 - accuracy: 0.9894 - val_loss: 0.3001 - val_accuracy: 0.9031\n",
      "Epoch 129/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0470 - accuracy: 0.9828\n",
      "Epoch 00129: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.0470 - accuracy: 0.9828 - val_loss: 0.2730 - val_accuracy: 0.9250\n",
      "Epoch 130/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0289 - accuracy: 0.9892\n",
      "Epoch 00130: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.0289 - accuracy: 0.9892 - val_loss: 0.2851 - val_accuracy: 0.9312\n",
      "Epoch 131/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0426 - accuracy: 0.9854\n",
      "Epoch 00131: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.0426 - accuracy: 0.9854 - val_loss: 0.2775 - val_accuracy: 0.9031\n",
      "Epoch 132/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0206 - accuracy: 0.9936\n",
      "Epoch 00132: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.0206 - accuracy: 0.9936 - val_loss: 0.1932 - val_accuracy: 0.9375\n",
      "Epoch 133/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0199 - accuracy: 0.9912\n",
      "Epoch 00133: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0199 - accuracy: 0.9912 - val_loss: 0.3446 - val_accuracy: 0.8969\n",
      "Epoch 134/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0224 - accuracy: 0.9898\n",
      "Epoch 00134: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.0224 - accuracy: 0.9898 - val_loss: 0.2428 - val_accuracy: 0.9375\n",
      "Epoch 135/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0246 - accuracy: 0.9894\n",
      "Epoch 00135: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0246 - accuracy: 0.9894 - val_loss: 0.2155 - val_accuracy: 0.9219\n",
      "Epoch 136/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0125 - accuracy: 0.9975\n",
      "Epoch 00136: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 338ms/step - loss: 0.0125 - accuracy: 0.9975 - val_loss: 0.3106 - val_accuracy: 0.9250\n",
      "Epoch 137/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0255 - accuracy: 0.9898\n",
      "Epoch 00137: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.0255 - accuracy: 0.9898 - val_loss: 0.2828 - val_accuracy: 0.9187\n",
      "Epoch 138/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0247 - accuracy: 0.9906\n",
      "Epoch 00138: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0247 - accuracy: 0.9906 - val_loss: 0.2136 - val_accuracy: 0.9469\n",
      "Epoch 139/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0103 - accuracy: 0.9962\n",
      "Epoch 00139: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0103 - accuracy: 0.9962 - val_loss: 0.2129 - val_accuracy: 0.9500\n",
      "Epoch 140/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0158 - accuracy: 0.9943\n",
      "Epoch 00140: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.0158 - accuracy: 0.9943 - val_loss: 0.2202 - val_accuracy: 0.9250\n",
      "Epoch 141/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0144 - accuracy: 0.9937\n",
      "Epoch 00141: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0144 - accuracy: 0.9937 - val_loss: 0.2111 - val_accuracy: 0.9312\n",
      "Epoch 142/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0121 - accuracy: 0.9962\n",
      "Epoch 00142: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 18s 357ms/step - loss: 0.0121 - accuracy: 0.9962 - val_loss: 0.1925 - val_accuracy: 0.9531\n",
      "Epoch 143/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0149 - accuracy: 0.9937\n",
      "Epoch 00143: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 343ms/step - loss: 0.0149 - accuracy: 0.9937 - val_loss: 0.2054 - val_accuracy: 0.9344\n",
      "Epoch 144/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0180 - accuracy: 0.9943\n",
      "Epoch 00144: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 338ms/step - loss: 0.0180 - accuracy: 0.9943 - val_loss: 0.2751 - val_accuracy: 0.9281\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 145/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0387 - accuracy: 0.9881\n",
      "Epoch 00145: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0387 - accuracy: 0.9881 - val_loss: 0.4087 - val_accuracy: 0.8906\n",
      "Epoch 146/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0266 - accuracy: 0.9937\n",
      "Epoch 00146: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0266 - accuracy: 0.9937 - val_loss: 0.2579 - val_accuracy: 0.9375\n",
      "Epoch 147/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0169 - accuracy: 0.9917\n",
      "Epoch 00147: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0169 - accuracy: 0.9917 - val_loss: 0.3509 - val_accuracy: 0.9031\n",
      "Epoch 148/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0213 - accuracy: 0.9936\n",
      "Epoch 00148: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0213 - accuracy: 0.9936 - val_loss: 0.2479 - val_accuracy: 0.9406\n",
      "Epoch 149/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0123 - accuracy: 0.9962\n",
      "Epoch 00149: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0123 - accuracy: 0.9962 - val_loss: 0.1996 - val_accuracy: 0.9469\n",
      "Epoch 150/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0200 - accuracy: 0.9956\n",
      "Epoch 00150: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0200 - accuracy: 0.9956 - val_loss: 0.2358 - val_accuracy: 0.9344\n",
      "Epoch 151/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0265 - accuracy: 0.9925\n",
      "Epoch 00151: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 337ms/step - loss: 0.0265 - accuracy: 0.9925 - val_loss: 0.2077 - val_accuracy: 0.9375\n",
      "Epoch 152/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0235 - accuracy: 0.9898\n",
      "Epoch 00152: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0235 - accuracy: 0.9898 - val_loss: 0.5310 - val_accuracy: 0.8719\n",
      "Epoch 153/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0183 - accuracy: 0.9950\n",
      "Epoch 00153: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 336ms/step - loss: 0.0183 - accuracy: 0.9950 - val_loss: 0.2343 - val_accuracy: 0.9344\n",
      "Epoch 154/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0166 - accuracy: 0.9956\n",
      "Epoch 00154: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0166 - accuracy: 0.9956 - val_loss: 0.2373 - val_accuracy: 0.9500\n",
      "Epoch 155/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0254 - accuracy: 0.9911\n",
      "Epoch 00155: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0254 - accuracy: 0.9911 - val_loss: 0.1471 - val_accuracy: 0.9594\n",
      "Epoch 156/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0150 - accuracy: 0.9950\n",
      "Epoch 00156: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0150 - accuracy: 0.9950 - val_loss: 0.2558 - val_accuracy: 0.9219\n",
      "Epoch 157/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0288 - accuracy: 0.9886\n",
      "Epoch 00157: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 328ms/step - loss: 0.0288 - accuracy: 0.9886 - val_loss: 0.2472 - val_accuracy: 0.9375\n",
      "Epoch 158/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0244 - accuracy: 0.9936\n",
      "Epoch 00158: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.0244 - accuracy: 0.9936 - val_loss: 0.2082 - val_accuracy: 0.9406\n",
      "Epoch 159/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0133 - accuracy: 0.9936\n",
      "Epoch 00159: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0133 - accuracy: 0.9936 - val_loss: 0.2180 - val_accuracy: 0.9375\n",
      "Epoch 160/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0161 - accuracy: 0.9931\n",
      "Epoch 00160: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0161 - accuracy: 0.9931 - val_loss: 0.1899 - val_accuracy: 0.9469\n",
      "Epoch 161/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0167 - accuracy: 0.9950\n",
      "Epoch 00161: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0167 - accuracy: 0.9950 - val_loss: 0.2380 - val_accuracy: 0.9500\n",
      "Epoch 162/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0125 - accuracy: 0.9950\n",
      "Epoch 00162: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.0125 - accuracy: 0.9950 - val_loss: 0.1608 - val_accuracy: 0.9469\n",
      "Epoch 163/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0148 - accuracy: 0.9968\n",
      "Epoch 00163: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.0148 - accuracy: 0.9968 - val_loss: 0.2440 - val_accuracy: 0.9406\n",
      "Epoch 164/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0078 - accuracy: 0.9981\n",
      "Epoch 00164: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.0078 - accuracy: 0.9981 - val_loss: 0.2128 - val_accuracy: 0.9375\n",
      "Epoch 165/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0171 - accuracy: 0.9931\n",
      "Epoch 00165: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0171 - accuracy: 0.9931 - val_loss: 0.2672 - val_accuracy: 0.9344\n",
      "Epoch 166/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0167 - accuracy: 0.9949\n",
      "Epoch 00166: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.0167 - accuracy: 0.9949 - val_loss: 0.4738 - val_accuracy: 0.8750\n",
      "Epoch 167/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0285 - accuracy: 0.9905\n",
      "Epoch 00167: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.0285 - accuracy: 0.9905 - val_loss: 0.2185 - val_accuracy: 0.9500\n",
      "Epoch 168/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0170 - accuracy: 0.9930\n",
      "Epoch 00168: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 330ms/step - loss: 0.0170 - accuracy: 0.9930 - val_loss: 0.2644 - val_accuracy: 0.9438\n",
      "Epoch 169/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0135 - accuracy: 0.9956\n",
      "Epoch 00169: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0135 - accuracy: 0.9956 - val_loss: 0.2556 - val_accuracy: 0.9344\n",
      "Epoch 170/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0105 - accuracy: 0.9962\n",
      "Epoch 00170: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0105 - accuracy: 0.9962 - val_loss: 0.1950 - val_accuracy: 0.9469\n",
      "Epoch 171/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0142 - accuracy: 0.9937\n",
      "Epoch 00171: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 336ms/step - loss: 0.0142 - accuracy: 0.9937 - val_loss: 0.2184 - val_accuracy: 0.9563\n",
      "Epoch 172/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0056 - accuracy: 0.9981\n",
      "Epoch 00172: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0056 - accuracy: 0.9981 - val_loss: 0.2537 - val_accuracy: 0.9281\n",
      "Epoch 173/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0178 - accuracy: 0.9956\n",
      "Epoch 00173: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0178 - accuracy: 0.9956 - val_loss: 0.2552 - val_accuracy: 0.9250\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 174/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0106 - accuracy: 0.9956\n",
      "Epoch 00174: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0106 - accuracy: 0.9956 - val_loss: 0.1805 - val_accuracy: 0.9438\n",
      "Epoch 175/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0119 - accuracy: 0.9937\n",
      "Epoch 00175: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 340ms/step - loss: 0.0119 - accuracy: 0.9937 - val_loss: 0.2476 - val_accuracy: 0.9250\n",
      "Epoch 176/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0107 - accuracy: 0.9969\n",
      "Epoch 00176: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0107 - accuracy: 0.9969 - val_loss: 0.1862 - val_accuracy: 0.9500\n",
      "Epoch 177/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0075 - accuracy: 0.9975\n",
      "Epoch 00177: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 338ms/step - loss: 0.0075 - accuracy: 0.9975 - val_loss: 0.1879 - val_accuracy: 0.9531\n",
      "Epoch 178/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0073 - accuracy: 0.9987\n",
      "Epoch 00178: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 344ms/step - loss: 0.0073 - accuracy: 0.9987 - val_loss: 0.2199 - val_accuracy: 0.9500\n",
      "Epoch 179/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0043 - accuracy: 0.9987\n",
      "Epoch 00179: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 338ms/step - loss: 0.0043 - accuracy: 0.9987 - val_loss: 0.2131 - val_accuracy: 0.9531\n",
      "Epoch 180/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0203 - accuracy: 0.9931\n",
      "Epoch 00180: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0203 - accuracy: 0.9931 - val_loss: 0.2412 - val_accuracy: 0.9406\n",
      "Epoch 181/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0164 - accuracy: 0.9931\n",
      "Epoch 00181: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0164 - accuracy: 0.9931 - val_loss: 0.2564 - val_accuracy: 0.9312\n",
      "Epoch 182/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0302 - accuracy: 0.9898\n",
      "Epoch 00182: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 329ms/step - loss: 0.0302 - accuracy: 0.9898 - val_loss: 0.2928 - val_accuracy: 0.9312\n",
      "Epoch 183/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0249 - accuracy: 0.9917\n",
      "Epoch 00183: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0249 - accuracy: 0.9917 - val_loss: 0.1997 - val_accuracy: 0.9375\n",
      "Epoch 184/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0155 - accuracy: 0.9950\n",
      "Epoch 00184: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0155 - accuracy: 0.9950 - val_loss: 0.1910 - val_accuracy: 0.9469\n",
      "Epoch 185/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0168 - accuracy: 0.9962\n",
      "Epoch 00185: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0168 - accuracy: 0.9962 - val_loss: 0.2029 - val_accuracy: 0.9406\n",
      "Epoch 186/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0120 - accuracy: 0.9949\n",
      "Epoch 00186: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 16s 327ms/step - loss: 0.0120 - accuracy: 0.9949 - val_loss: 0.2997 - val_accuracy: 0.9250\n",
      "Epoch 187/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0155 - accuracy: 0.9937\n",
      "Epoch 00187: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 337ms/step - loss: 0.0155 - accuracy: 0.9937 - val_loss: 0.2493 - val_accuracy: 0.9344\n",
      "Epoch 188/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0129 - accuracy: 0.9969\n",
      "Epoch 00188: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 334ms/step - loss: 0.0129 - accuracy: 0.9969 - val_loss: 0.3241 - val_accuracy: 0.9250\n",
      "Epoch 189/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0098 - accuracy: 0.9969\n",
      "Epoch 00189: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0098 - accuracy: 0.9969 - val_loss: 0.1926 - val_accuracy: 0.9469\n",
      "Epoch 190/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0117 - accuracy: 0.9949\n",
      "Epoch 00190: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 331ms/step - loss: 0.0117 - accuracy: 0.9949 - val_loss: 0.2786 - val_accuracy: 0.9344\n",
      "Epoch 191/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0120 - accuracy: 0.9943\n",
      "Epoch 00191: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0120 - accuracy: 0.9943 - val_loss: 0.3462 - val_accuracy: 0.9187\n",
      "Epoch 192/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0060 - accuracy: 0.9981\n",
      "Epoch 00192: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0060 - accuracy: 0.9981 - val_loss: 0.2205 - val_accuracy: 0.9438\n",
      "Epoch 193/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0091 - accuracy: 0.9969\n",
      "Epoch 00193: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 336ms/step - loss: 0.0091 - accuracy: 0.9969 - val_loss: 0.2313 - val_accuracy: 0.9406\n",
      "Epoch 194/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0161 - accuracy: 0.9949\n",
      "Epoch 00194: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0161 - accuracy: 0.9949 - val_loss: 0.3533 - val_accuracy: 0.9187\n",
      "Epoch 195/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0097 - accuracy: 0.9969\n",
      "Epoch 00195: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 335ms/step - loss: 0.0097 - accuracy: 0.9969 - val_loss: 0.2454 - val_accuracy: 0.9281\n",
      "Epoch 196/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0263 - accuracy: 0.9937\n",
      "Epoch 00196: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0263 - accuracy: 0.9937 - val_loss: 0.2718 - val_accuracy: 0.9344\n",
      "Epoch 197/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0073 - accuracy: 0.9981\n",
      "Epoch 00197: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0073 - accuracy: 0.9981 - val_loss: 0.2352 - val_accuracy: 0.9406\n",
      "Epoch 198/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0245 - accuracy: 0.9917\n",
      "Epoch 00198: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 333ms/step - loss: 0.0245 - accuracy: 0.9917 - val_loss: 0.2217 - val_accuracy: 0.9531\n",
      "Epoch 199/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0111 - accuracy: 0.9962\n",
      "Epoch 00199: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 330ms/step - loss: 0.0111 - accuracy: 0.9962 - val_loss: 0.3391 - val_accuracy: 0.9438\n",
      "Epoch 200/200\n",
      "50/50 [==============================] - ETA: 0s - loss: 0.0078 - accuracy: 0.9975\n",
      "Epoch 00200: val_accuracy did not improve from 0.95938\n",
      "50/50 [==============================] - 17s 332ms/step - loss: 0.0078 - accuracy: 0.9975 - val_loss: 0.2414 - val_accuracy: 0.9469\n",
      "Wall time: 56min 51s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "history = tuned_model.fit(train_generator, \n",
    "                  steps_per_epoch=50, \n",
    "                  epochs=200,\n",
    "                  validation_data=validation_generator, \n",
    "                  validation_steps=10,\n",
    "                  callbacks=callbacks_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# summarize history for accuracy\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.plot(history.history['val_accuracy'])\n",
    "plt.title('model accuracy')\n",
    "plt.ylabel('accuracy')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()\n",
    "# summarize history for loss\n",
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['val_loss'])\n",
    "plt.title('model loss')\n",
    "plt.ylabel('loss')\n",
    "plt.xlabel('epoch')\n",
    "plt.legend(['train', 'test'], loc='upper left')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "tuned_model = keras.models.load_model(r'C:\\Users\\Julius Chris\\Desktop\\skripsi\\alexnet_tuned.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7/7 [==============================] - 2s 228ms/step - loss: 0.0426 - accuracy: 0.9902\n",
      "Wall time: 2.25 s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.04258039966225624, 0.9902439117431641]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "tuned_model.evaluate(testing_generator)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From <ipython-input-12-03f991b503db>:3: Model.predict_generator (from tensorflow.python.keras.engine.training) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use Model.predict, which supports generators.\n",
      "Confusion matrix, without normalization\n",
      "[[41  0  0  0  0]\n",
      " [ 0 40  1  0  0]\n",
      " [ 0  2 39  0  0]\n",
      " [ 0  0  0 41  0]\n",
      " [ 0  0  0  0 41]]\n",
      "                          precision    recall  f1-score   support\n",
      "\n",
      "            Dyskeratotic       1.00      1.00      1.00        41\n",
      "            Koilocytotic       0.95      0.98      0.96        41\n",
      "              Metapastic       0.97      0.95      0.96        41\n",
      "               Parabasal       1.00      1.00      1.00        41\n",
      "Superficial-Intermediate       1.00      1.00      1.00        41\n",
      "\n",
      "                accuracy                           0.99       205\n",
      "               macro avg       0.99      0.99      0.99       205\n",
      "            weighted avg       0.99      0.99      0.99       205\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "labels = list(testing_generator.class_indices.keys())   \n",
    "y_true = testing_generator.classes\n",
    "y_pred = tuned_model.predict_generator(testing_generator)\n",
    "rounded_pred = np.argmax(y_pred, axis=1)\n",
    "cm = confusion_matrix(y_true=y_true, y_pred=rounded_pred)\n",
    "plot_confusion_matrix(cm, labels, title=\"Alexnet Tuned\")\n",
    "report = classification_report(y_true, rounded_pred, target_names=labels)\n",
    "print(report)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}